Facebook App Review - API commands (user_videos)

1) Save GET /me/videos output (Graph API Explorer)
- In Graph API Explorer: Get User Access Token -> check user_videos -> Get Token
- Run:
  GET /me/videos?fields=id,title,created_time,thumbnails,source
- Copy the response and save as me_videos.json in this folder.

2) Save debug_token output (run locally with your APP_ID and APP_SECRET)
- PowerShell (curl.exe):
  $userToken = "PASTE_TEST_USER_TOKEN_HERE"
  $appId = "YOUR_APP_ID"
  $appSecret = "YOUR_APP_SECRET"
  & curl.exe -s "https://graph.facebook.com/debug_token?input_token=$userToken&access_token=$appId|$appSecret" -o debug_token.json

3) Optional — Upload to a Page and fetch page videos (Page flow)
- Get a user token with pages_show_list + pages_manage_posts in Graph API Explorer (signed-in as the Page admin), then call:
  GET /me/accounts  (copy the response -> find the Page id and page_access_token)
- Upload via Page API (curl):
  $pageToken = 'PASTE_PAGE_ACCESS_TOKEN_HERE'
  $pageId = 'PASTE_PAGE_ID_HERE'
  $file = "$env:USERPROFILE\Downloads\video_landscape.mp4"
  & curl.exe -s -X POST "https://graph-video.facebook.com/v17.0/$pageId/videos?access_token=$pageToken" -F "source=@$file" -F "description=Test upload for App Review - Page native video" -o page_upload_response.json

- Fetch Page videos:
  & curl.exe -s "https://graph.facebook.com/v17.0/$pageId/videos?fields=id,source,thumbnails,created_time&access_token=$pageToken" -o page_videos.json

4) If OAuth dialogs reject pages_* scopes
- Use the UI upload route (Creator Studio / Business Suite) to upload the video to the Page, then use your APP_ID|APP_SECRET to GET /{page-id}/videos (app token) after ensuring the Page is published and publicly visible.

5) Packaging (once files exist)
- Put these files into a folder and zip them for upload to App Review:
  facebook_app_review_user_videos_README.txt
  facebook_app_review_api_commands.txt
  screenshot_banner.png
  screen_recording.mp4
  me_videos.json
  debug_token.json
  OPTIONAL: page_videos.json, page_upload_response.json

Security reminder: never check tokens or secrets into source control. Paste tokens locally when running commands and delete them when finished.
Facebook App Review — API commands and example outputs

File purpose:
This file contains the exact Graph API commands to show during your screen recording and example JSON snippets. Replace placeholders with test tokens and IDs. Attach this file along with the README and the video when submitting to App Review.

---
Exact Graph API commands (copy/paste)

1) List the signed-in user's videos (me/videos)
cURL:
  curl -i -X GET "https://graph.facebook.com/v17.0/me/videos?fields=id,title,description,created_time,thumbnails,source&access_token={ACCESS_TOKEN}"

JavaScript (browser console):
  fetch("https://graph.facebook.com/v17.0/me/videos?fields=id,title,description,created_time,thumbnails,source&access_token={ACCESS_TOKEN}")
    .then(r => r.json())
    .then(console.log)

2) Get a single video object by ID
cURL:
  curl -i -X GET "https://graph.facebook.com/v17.0/{VIDEO_ID}?fields=id,title,description,created_time,thumbnails,source&access_token={ACCESS_TOKEN}"

3) Verify token scopes (debug_token)
cURL:
  curl -i -X GET "https://graph.facebook.com/debug_token?input_token={ACCESS_TOKEN}&access_token={APP_ID}|{APP_SECRET}"

Notes:
- Replace {ACCESS_TOKEN} with a test user's user access token obtained via the app's login flow or the Graph API Explorer for a test user.
- Replace {APP_ID} and {APP_SECRET} only for debug_token calls. Do not include your app secret in public copies. If you need to show debug_token results in App Review, paste only the JSON output (redact secrets).

---
Example /me/videos JSON snippet (expected):
{
  "data": [
    {
      "id": "1234567890",
      "title": "My test clip",
      "description": "Short demo",
      "created_time": "2025-10-01T12:34:56+0000",
      "thumbnails": {
        "data": [ { "uri": "https://.../thumb.jpg" } ]
      },
      "source": "https://video.xx.fbcdn.net/....mp4"
    }
  ],
  "paging": { }
}

Example debug_token JSON snippet (must include "user_videos"):
{
  "data": {
    "app_id": "YOUR_APP_ID",
    "type": "USER",
    "application": "Your App Name",
    "scopes": ["email","user_videos", ...],
    "expires_at": 1735689600
  }
}

---
How to use these in your recording:
- Show the terminal or browser console with the exact command typed and executed.
- Pause on the returned JSON so the reviewer can read the response containing video ids and source URLs.
- For debug_token, show the JSON output that includes the "scopes" array listing "user_videos".

Security reminder:
Use only test users and test tokens in the video. Do not reveal production app secrets or personal accounts.

End of file
