[{"number":372,"created_at":"2025-10-28T07:50:53Z","updated_at":"2025-10-28T07:50:53Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/372","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/372","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":203,"end_line":255,"start_column":106,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/372/instances","dismissal_approved_by":null},{"number":371,"created_at":"2025-10-28T07:50:53Z","updated_at":"2025-10-28T07:50:53Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/371","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/371","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":203,"end_line":203,"start_column":90,"end_column":104},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/371/instances","dismissal_approved_by":null},{"number":370,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T13:14:47Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/370","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/370","assignees":[],"state":"fixed","fixed_at":"2025-10-27T13:14:44Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-helmet-configuration","severity":"error","description":"Insecure configuration of Helmet security middleware","name":"js/insecure-helmet-configuration","tags":["external/cwe/cwe-1021","external/cwe/cwe-693","security"],"full_description":"The Helmet middleware is used to set security-related HTTP headers in Express applications. This query finds instances where the middleware is configured with important security features disabled.","help":"# Insecure configuration of Helmet security middleware\n[Helmet](https://helmetjs.github.io/) is a collection of middleware functions for securing Express apps. It sets various HTTP headers to guard against common web vulnerabilities. This query detects Helmet misconfigurations that can lead to security vulnerabilities, specifically:\n\n* Disabling frame protection\n* Disabling Content Security Policy\nContent Security Policy (CSP) helps spot and prevent injection attacks such as Cross-Site Scripting (XSS). Removing frame protections exposes an application to attacks such as clickjacking, where an attacker can trick a user into clicking on a button or link on a targeted page when they intended to click on the page carrying out the attack.\n\nUsers of the query can extend the set of required Helmet features by adding additional checks for them, using CodeQL [data extensions](https://codeql.github.com/docs/codeql-language-guides/customizing-library-models-for-javascript/) in a [CodeQL model pack](https://docs.github.com/en/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-and-working-with-codeql-packs#creating-a-codeql-model-pack). See `CUSTOMIZING.md` in the query source for more information.\n\n\n## Recommendation\nTo help mitigate these vulnerabilities, ensure that the following Helmet functions are not disabled, and are configured appropriately to your application:\n\n* `frameguard`\n* `contentSecurityPolicy`\n\n## Example\nThe following code snippet demonstrates Helmet configured in an insecure manner:\n\n\n```javascript\nconst helmet = require('helmet');\n\napp.use(helmet({\n    frameguard: false,\n    contentSecurityPolicy: false\n}));\n```\nIn this example, the defaults are used, which enables frame protection and a default Content Security Policy.\n\n\n```javascript\napp.use(helmet());\n```\nYou can also enable a custom Content Security Policy by passing an object to the `contentSecurityPolicy` key. For example, taken from the [Helmet docs](https://helmetjs.github.io/#content-security-policy):\n\n\n```javascript\napp.use(\n    helmet({\n        contentSecurityPolicy: {\n            directives: {\n                \"script-src\": [\"'self'\", \"example.com\"],\n                \"style-src\": null,\n            },\n        },\n    })\n);\n```\n\n## References\n* [helmet.js website](https://helmetjs.github.io/)\n* [Content Security Policy (CSP) | MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)\n* [Mozilla Web Security Guidelines](https://infosec.mozilla.org/guidelines/web_security)\n* [Protect against clickjacking | MDN](https://developer.mozilla.org/en-US/docs/Web/Security#protect_against_clickjacking)\n* Common Weakness Enumeration: [CWE-693](https://cwe.mitre.org/data/definitions/693.html).\n* Common Weakness Enumeration: [CWE-1021](https://cwe.mitre.org/data/definitions/1021.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"cb2091b5fdfb120f34df1761b45cc12ace7981ec","message":{"text":"Helmet security middleware, configured with security setting contentSecurityPolicy set to 'false', which disables enforcing that feature."},"location":{"path":"src/server.js","start_line":576,"end_line":576,"start_column":21,"end_column":61},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/370/instances","dismissal_approved_by":null},{"number":369,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/369","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/369","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/biased-cryptographic-random","severity":"warning","description":"Creating biased random numbers from a cryptographically secure source","name":"js/biased-cryptographic-random","tags":["external/cwe/cwe-327","security"],"full_description":"Some mathematical operations on random numbers can cause bias in the results and compromise security.","help":"# Creating biased random numbers from a cryptographically secure source\nGenerating secure random numbers can be an important part of creating a secure software system. This can be done using APIs that create cryptographically secure random numbers.\n\nHowever, using some mathematical operations on these cryptographically secure random numbers can create biased results, where some outcomes are more likely than others. Such biased results can make it easier for an attacker to guess the random numbers, and thereby break the security of the software system.\n\n\n## Recommendation\nBe very careful not to introduce bias when performing mathematical operations on cryptographically secure random numbers.\n\nIf possible, avoid performing mathematical operations on cryptographically secure random numbers at all, and use a preexisting library instead.\n\n\n## Example\nThe example below uses the modulo operator to create an array of 10 random digits using random bytes as the source for randomness.\n\n\n```javascript\nconst crypto = require('crypto');\n\nconst digits = [];\nfor (let i = 0; i < 10; i++) {\n    digits.push(crypto.randomBytes(1)[0] % 10); // NOT OK\n}\n```\nThe random byte is a uniformly random value between 0 and 255, and thus the result from using the modulo operator is slightly more likely to be between 0 and 5 than between 6 and 9.\n\nThe issue has been fixed in the code below by using a library that correctly generates cryptographically secure random values.\n\n\n```javascript\nconst cryptoRandomString = require('crypto-random-string');\n\nconst digits = cryptoRandomString({length: 10, type: 'numeric'});\n```\nAlternatively, the issue can be fixed by fixing the math in the original code. In the code below the random byte is discarded if the value is greater than or equal to 250. Thus the modulo operator is used on a uniformly random number between 0 and 249, which results in a uniformly random digit between 0 and 9.\n\n\n```javascript\nconst crypto = require('crypto');\n\nconst digits = [];\nwhile (digits.length < 10) {\n    const byte = crypto.randomBytes(1)[0];\n    if (byte >= 250) {\n        continue;\n    }\n    digits.push(byte % 10); // OK\n}\n```\n\n## References\n* Stack Overflow: [Understanding ΓÇ£randomnessΓÇ¥](https://stackoverflow.com/questions/3956478/understanding-randomness).\n* OWASP: [Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness).\n* OWASP: [Rule - Use strong approved cryptographic algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#rule---use-strong-approved-authenticated-encryption).\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"Using division and rounding the result on a cryptographically secure random number produces biased results."},"location":{"path":"src/services/viralImpactEngine.js","start_line":417,"end_line":417,"start_column":43,"end_column":70},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/369/instances","dismissal_approved_by":null},{"number":368,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/368","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/368","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/biased-cryptographic-random","severity":"warning","description":"Creating biased random numbers from a cryptographically secure source","name":"js/biased-cryptographic-random","tags":["external/cwe/cwe-327","security"],"full_description":"Some mathematical operations on random numbers can cause bias in the results and compromise security.","help":"# Creating biased random numbers from a cryptographically secure source\nGenerating secure random numbers can be an important part of creating a secure software system. This can be done using APIs that create cryptographically secure random numbers.\n\nHowever, using some mathematical operations on these cryptographically secure random numbers can create biased results, where some outcomes are more likely than others. Such biased results can make it easier for an attacker to guess the random numbers, and thereby break the security of the software system.\n\n\n## Recommendation\nBe very careful not to introduce bias when performing mathematical operations on cryptographically secure random numbers.\n\nIf possible, avoid performing mathematical operations on cryptographically secure random numbers at all, and use a preexisting library instead.\n\n\n## Example\nThe example below uses the modulo operator to create an array of 10 random digits using random bytes as the source for randomness.\n\n\n```javascript\nconst crypto = require('crypto');\n\nconst digits = [];\nfor (let i = 0; i < 10; i++) {\n    digits.push(crypto.randomBytes(1)[0] % 10); // NOT OK\n}\n```\nThe random byte is a uniformly random value between 0 and 255, and thus the result from using the modulo operator is slightly more likely to be between 0 and 5 than between 6 and 9.\n\nThe issue has been fixed in the code below by using a library that correctly generates cryptographically secure random values.\n\n\n```javascript\nconst cryptoRandomString = require('crypto-random-string');\n\nconst digits = cryptoRandomString({length: 10, type: 'numeric'});\n```\nAlternatively, the issue can be fixed by fixing the math in the original code. In the code below the random byte is discarded if the value is greater than or equal to 250. Thus the modulo operator is used on a uniformly random number between 0 and 249, which results in a uniformly random digit between 0 and 9.\n\n\n```javascript\nconst crypto = require('crypto');\n\nconst digits = [];\nwhile (digits.length < 10) {\n    const byte = crypto.randomBytes(1)[0];\n    if (byte >= 250) {\n        continue;\n    }\n    digits.push(byte % 10); // OK\n}\n```\n\n## References\n* Stack Overflow: [Understanding ΓÇ£randomnessΓÇ¥](https://stackoverflow.com/questions/3956478/understanding-randomness).\n* OWASP: [Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness).\n* OWASP: [Rule - Use strong approved cryptographic algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#rule---use-strong-approved-authenticated-encryption).\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"Using modulo on a cryptographically secure random number produces biased results."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":216,"end_line":216,"start_column":33,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/368/instances","dismissal_approved_by":null},{"number":367,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/367","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/367","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/biased-cryptographic-random","severity":"warning","description":"Creating biased random numbers from a cryptographically secure source","name":"js/biased-cryptographic-random","tags":["external/cwe/cwe-327","security"],"full_description":"Some mathematical operations on random numbers can cause bias in the results and compromise security.","help":"# Creating biased random numbers from a cryptographically secure source\nGenerating secure random numbers can be an important part of creating a secure software system. This can be done using APIs that create cryptographically secure random numbers.\n\nHowever, using some mathematical operations on these cryptographically secure random numbers can create biased results, where some outcomes are more likely than others. Such biased results can make it easier for an attacker to guess the random numbers, and thereby break the security of the software system.\n\n\n## Recommendation\nBe very careful not to introduce bias when performing mathematical operations on cryptographically secure random numbers.\n\nIf possible, avoid performing mathematical operations on cryptographically secure random numbers at all, and use a preexisting library instead.\n\n\n## Example\nThe example below uses the modulo operator to create an array of 10 random digits using random bytes as the source for randomness.\n\n\n```javascript\nconst crypto = require('crypto');\n\nconst digits = [];\nfor (let i = 0; i < 10; i++) {\n    digits.push(crypto.randomBytes(1)[0] % 10); // NOT OK\n}\n```\nThe random byte is a uniformly random value between 0 and 255, and thus the result from using the modulo operator is slightly more likely to be between 0 and 5 than between 6 and 9.\n\nThe issue has been fixed in the code below by using a library that correctly generates cryptographically secure random values.\n\n\n```javascript\nconst cryptoRandomString = require('crypto-random-string');\n\nconst digits = cryptoRandomString({length: 10, type: 'numeric'});\n```\nAlternatively, the issue can be fixed by fixing the math in the original code. In the code below the random byte is discarded if the value is greater than or equal to 250. Thus the modulo operator is used on a uniformly random number between 0 and 249, which results in a uniformly random digit between 0 and 9.\n\n\n```javascript\nconst crypto = require('crypto');\n\nconst digits = [];\nwhile (digits.length < 10) {\n    const byte = crypto.randomBytes(1)[0];\n    if (byte >= 250) {\n        continue;\n    }\n    digits.push(byte % 10); // OK\n}\n```\n\n## References\n* Stack Overflow: [Understanding ΓÇ£randomnessΓÇ¥](https://stackoverflow.com/questions/3956478/understanding-randomness).\n* OWASP: [Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness).\n* OWASP: [Rule - Use strong approved cryptographic algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#rule---use-strong-approved-authenticated-encryption).\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"Using modulo on a cryptographically secure random number produces biased results."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":215,"end_line":215,"start_column":43,"end_column":87},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/367/instances","dismissal_approved_by":null},{"number":366,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/366","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/366","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/biased-cryptographic-random","severity":"warning","description":"Creating biased random numbers from a cryptographically secure source","name":"js/biased-cryptographic-random","tags":["external/cwe/cwe-327","security"],"full_description":"Some mathematical operations on random numbers can cause bias in the results and compromise security.","help":"# Creating biased random numbers from a cryptographically secure source\nGenerating secure random numbers can be an important part of creating a secure software system. This can be done using APIs that create cryptographically secure random numbers.\n\nHowever, using some mathematical operations on these cryptographically secure random numbers can create biased results, where some outcomes are more likely than others. Such biased results can make it easier for an attacker to guess the random numbers, and thereby break the security of the software system.\n\n\n## Recommendation\nBe very careful not to introduce bias when performing mathematical operations on cryptographically secure random numbers.\n\nIf possible, avoid performing mathematical operations on cryptographically secure random numbers at all, and use a preexisting library instead.\n\n\n## Example\nThe example below uses the modulo operator to create an array of 10 random digits using random bytes as the source for randomness.\n\n\n```javascript\nconst crypto = require('crypto');\n\nconst digits = [];\nfor (let i = 0; i < 10; i++) {\n    digits.push(crypto.randomBytes(1)[0] % 10); // NOT OK\n}\n```\nThe random byte is a uniformly random value between 0 and 255, and thus the result from using the modulo operator is slightly more likely to be between 0 and 5 than between 6 and 9.\n\nThe issue has been fixed in the code below by using a library that correctly generates cryptographically secure random values.\n\n\n```javascript\nconst cryptoRandomString = require('crypto-random-string');\n\nconst digits = cryptoRandomString({length: 10, type: 'numeric'});\n```\nAlternatively, the issue can be fixed by fixing the math in the original code. In the code below the random byte is discarded if the value is greater than or equal to 250. Thus the modulo operator is used on a uniformly random number between 0 and 249, which results in a uniformly random digit between 0 and 9.\n\n\n```javascript\nconst crypto = require('crypto');\n\nconst digits = [];\nwhile (digits.length < 10) {\n    const byte = crypto.randomBytes(1)[0];\n    if (byte >= 250) {\n        continue;\n    }\n    digits.push(byte % 10); // OK\n}\n```\n\n## References\n* Stack Overflow: [Understanding ΓÇ£randomnessΓÇ¥](https://stackoverflow.com/questions/3956478/understanding-randomness).\n* OWASP: [Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness).\n* OWASP: [Rule - Use strong approved cryptographic algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#rule---use-strong-approved-authenticated-encryption).\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"Using modulo on a cryptographically secure random number produces biased results."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":214,"end_line":214,"start_column":31,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/366/instances","dismissal_approved_by":null},{"number":365,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/365","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/365","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":171,"end_line":200,"start_column":99,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/365/instances","dismissal_approved_by":null},{"number":364,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/364","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/364","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/server.js","start_line":683,"end_line":683,"start_column":27,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/364/instances","dismissal_approved_by":null},{"number":363,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/363","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/363","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/server.js","start_line":614,"end_line":614,"start_column":27,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/363/instances","dismissal_approved_by":null},{"number":362,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/362","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/362","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":65,"end_line":65,"start_column":34,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/362/instances","dismissal_approved_by":null},{"number":361,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/361","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/361","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":23,"end_line":23,"start_column":35,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/361/instances","dismissal_approved_by":null},{"number":360,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/360","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/360","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/repostRoutes.js","start_line":11,"end_line":11,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/360/instances","dismissal_approved_by":null},{"number":359,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/359","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/359","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/platformRoutes.js","start_line":28,"end_line":28,"start_column":33,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/359/instances","dismissal_approved_by":null},{"number":358,"created_at":"2025-10-27T12:08:40Z","updated_at":"2025-10-27T12:08:40Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/358","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/358","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/paypalWebhookRoutes.js","start_line":168,"end_line":235,"start_column":137,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/358/instances","dismissal_approved_by":null},{"number":357,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T12:08:43Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/357","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/357","assignees":[],"state":"fixed","fixed_at":"2025-10-27T12:08:40Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-helmet-configuration","severity":"error","description":"Insecure configuration of Helmet security middleware","name":"js/insecure-helmet-configuration","tags":["external/cwe/cwe-1021","external/cwe/cwe-693","security"],"full_description":"The Helmet middleware is used to set security-related HTTP headers in Express applications. This query finds instances where the middleware is configured with important security features disabled.","help":"# Insecure configuration of Helmet security middleware\n[Helmet](https://helmetjs.github.io/) is a collection of middleware functions for securing Express apps. It sets various HTTP headers to guard against common web vulnerabilities. This query detects Helmet misconfigurations that can lead to security vulnerabilities, specifically:\n\n* Disabling frame protection\n* Disabling Content Security Policy\nContent Security Policy (CSP) helps spot and prevent injection attacks such as Cross-Site Scripting (XSS). Removing frame protections exposes an application to attacks such as clickjacking, where an attacker can trick a user into clicking on a button or link on a targeted page when they intended to click on the page carrying out the attack.\n\nUsers of the query can extend the set of required Helmet features by adding additional checks for them, using CodeQL [data extensions](https://codeql.github.com/docs/codeql-language-guides/customizing-library-models-for-javascript/) in a [CodeQL model pack](https://docs.github.com/en/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-and-working-with-codeql-packs#creating-a-codeql-model-pack). See `CUSTOMIZING.md` in the query source for more information.\n\n\n## Recommendation\nTo help mitigate these vulnerabilities, ensure that the following Helmet functions are not disabled, and are configured appropriately to your application:\n\n* `frameguard`\n* `contentSecurityPolicy`\n\n## Example\nThe following code snippet demonstrates Helmet configured in an insecure manner:\n\n\n```javascript\nconst helmet = require('helmet');\n\napp.use(helmet({\n    frameguard: false,\n    contentSecurityPolicy: false\n}));\n```\nIn this example, the defaults are used, which enables frame protection and a default Content Security Policy.\n\n\n```javascript\napp.use(helmet());\n```\nYou can also enable a custom Content Security Policy by passing an object to the `contentSecurityPolicy` key. For example, taken from the [Helmet docs](https://helmetjs.github.io/#content-security-policy):\n\n\n```javascript\napp.use(\n    helmet({\n        contentSecurityPolicy: {\n            directives: {\n                \"script-src\": [\"'self'\", \"example.com\"],\n                \"style-src\": null,\n            },\n        },\n    })\n);\n```\n\n## References\n* [helmet.js website](https://helmetjs.github.io/)\n* [Content Security Policy (CSP) | MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)\n* [Mozilla Web Security Guidelines](https://infosec.mozilla.org/guidelines/web_security)\n* [Protect against clickjacking | MDN](https://developer.mozilla.org/en-US/docs/Web/Security#protect_against_clickjacking)\n* Common Weakness Enumeration: [CWE-693](https://cwe.mitre.org/data/definitions/693.html).\n* Common Weakness Enumeration: [CWE-1021](https://cwe.mitre.org/data/definitions/1021.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"e9d4f2848ad39e025ed287b8b605019aff57f1d2","message":{"text":"Helmet security middleware, configured with security setting contentSecurityPolicy set to 'false', which disables enforcing that feature."},"location":{"path":"src/server.js","start_line":561,"end_line":561,"start_column":21,"end_column":61},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/357/instances","dismissal_approved_by":null},{"number":356,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T12:08:43Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/356","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/356","assignees":[],"state":"fixed","fixed_at":"2025-10-27T12:08:40Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-helmet-configuration","severity":"error","description":"Insecure configuration of Helmet security middleware","name":"js/insecure-helmet-configuration","tags":["external/cwe/cwe-1021","external/cwe/cwe-693","security"],"full_description":"The Helmet middleware is used to set security-related HTTP headers in Express applications. This query finds instances where the middleware is configured with important security features disabled.","help":"# Insecure configuration of Helmet security middleware\n[Helmet](https://helmetjs.github.io/) is a collection of middleware functions for securing Express apps. It sets various HTTP headers to guard against common web vulnerabilities. This query detects Helmet misconfigurations that can lead to security vulnerabilities, specifically:\n\n* Disabling frame protection\n* Disabling Content Security Policy\nContent Security Policy (CSP) helps spot and prevent injection attacks such as Cross-Site Scripting (XSS). Removing frame protections exposes an application to attacks such as clickjacking, where an attacker can trick a user into clicking on a button or link on a targeted page when they intended to click on the page carrying out the attack.\n\nUsers of the query can extend the set of required Helmet features by adding additional checks for them, using CodeQL [data extensions](https://codeql.github.com/docs/codeql-language-guides/customizing-library-models-for-javascript/) in a [CodeQL model pack](https://docs.github.com/en/code-security/codeql-cli/using-the-advanced-functionality-of-the-codeql-cli/creating-and-working-with-codeql-packs#creating-a-codeql-model-pack). See `CUSTOMIZING.md` in the query source for more information.\n\n\n## Recommendation\nTo help mitigate these vulnerabilities, ensure that the following Helmet functions are not disabled, and are configured appropriately to your application:\n\n* `frameguard`\n* `contentSecurityPolicy`\n\n## Example\nThe following code snippet demonstrates Helmet configured in an insecure manner:\n\n\n```javascript\nconst helmet = require('helmet');\n\napp.use(helmet({\n    frameguard: false,\n    contentSecurityPolicy: false\n}));\n```\nIn this example, the defaults are used, which enables frame protection and a default Content Security Policy.\n\n\n```javascript\napp.use(helmet());\n```\nYou can also enable a custom Content Security Policy by passing an object to the `contentSecurityPolicy` key. For example, taken from the [Helmet docs](https://helmetjs.github.io/#content-security-policy):\n\n\n```javascript\napp.use(\n    helmet({\n        contentSecurityPolicy: {\n            directives: {\n                \"script-src\": [\"'self'\", \"example.com\"],\n                \"style-src\": null,\n            },\n        },\n    })\n);\n```\n\n## References\n* [helmet.js website](https://helmetjs.github.io/)\n* [Content Security Policy (CSP) | MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)\n* [Mozilla Web Security Guidelines](https://infosec.mozilla.org/guidelines/web_security)\n* [Protect against clickjacking | MDN](https://developer.mozilla.org/en-US/docs/Web/Security#protect_against_clickjacking)\n* Common Weakness Enumeration: [CWE-693](https://cwe.mitre.org/data/definitions/693.html).\n* Common Weakness Enumeration: [CWE-1021](https://cwe.mitre.org/data/definitions/1021.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"e9d4f2848ad39e025ed287b8b605019aff57f1d2","message":{"text":"Helmet security middleware, configured with security setting contentSecurityPolicy set to 'false', which disables enforcing that feature."},"location":{"path":"src/server.js","start_line":556,"end_line":556,"start_column":21,"end_column":95},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/356/instances","dismissal_approved_by":null},{"number":355,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/355","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/355","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/request-forgery","severity":"error","description":"Server-side request forgery","name":"js/request-forgery","tags":["external/cwe/cwe-918","security"],"full_description":"Making a network request with user-controlled data in the URL allows for request forgery attacks.","help":"# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"The URL of this request depends on a user-provided value."},"location":{"path":"tiktokRoutes.js","start_line":530,"end_line":530,"start_column":32,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/355/instances","dismissal_approved_by":null},{"number":354,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/354","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/354","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/request-forgery","severity":"error","description":"Server-side request forgery","name":"js/request-forgery","tags":["external/cwe/cwe-918","security"],"full_description":"Making a network request with user-controlled data in the URL allows for request forgery attacks.","help":"# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"The URL of this request depends on a user-provided value."},"location":{"path":"src/snapchatRoutes.js","start_line":319,"end_line":323,"start_column":32,"end_column":7},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/354/instances","dismissal_approved_by":null},{"number":353,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/353","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/353","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/request-forgery","severity":"error","description":"Server-side request forgery","name":"js/request-forgery","tags":["external/cwe/cwe-918","security"],"full_description":"Making a network request with user-controlled data in the URL allows for request forgery attacks.","help":"# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"The URL of this request depends on a user-provided value."},"location":{"path":"src/services/youtubeService.js","start_line":77,"end_line":77,"start_column":21,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/353/instances","dismissal_approved_by":null},{"number":352,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/352","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/352","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/request-forgery","severity":"error","description":"Server-side request forgery","name":"js/request-forgery","tags":["external/cwe/cwe-918","security"],"full_description":"Making a network request with user-controlled data in the URL allows for request forgery attacks.","help":"# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"The URL of this request depends on a user-provided value."},"location":{"path":"src/routes/paypalWebhookRoutes.js","start_line":135,"end_line":143,"start_column":5,"end_column":7},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/352/instances","dismissal_approved_by":null},{"number":351,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/351","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/351","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/request-forgery","severity":"error","description":"Server-side request forgery","name":"js/request-forgery","tags":["external/cwe/cwe-918","security"],"full_description":"Making a network request with user-controlled data in the URL allows for request forgery attacks.","help":"# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"The URL of this request depends on a user-provided value."},"location":{"path":"src/routes/paypalWebhookRoutes.js","start_line":68,"end_line":70,"start_column":21,"end_column":5},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/351/instances","dismissal_approved_by":null},{"number":350,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/350","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/350","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/request-forgery","severity":"error","description":"Server-side request forgery","name":"js/request-forgery","tags":["external/cwe/cwe-918","security"],"full_description":"Making a network request with user-controlled data in the URL allows for request forgery attacks.","help":"# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"The URL of this request depends on a user-provided value."},"location":{"path":"src/routes/aggregateStatusRoutes.js","start_line":22,"end_line":22,"start_column":25,"end_column":115},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/350/instances","dismissal_approved_by":null},{"number":349,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/349","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/349","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/tainted-format-string","severity":"warning","description":"Use of externally-controlled format string","name":"js/tainted-format-string","tags":["external/cwe/cwe-134","security"],"full_description":"Using external input in format strings can lead to garbled output.","help":"# Use of externally-controlled format string\nFunctions like the Node.js standard library function `util.format` accept a format string that is used to format the remaining arguments by providing inline format specifiers. If the format string contains unsanitized input from an untrusted source, then that string may contain unexpected format specifiers that cause garbled output.\n\n\n## Recommendation\nEither sanitize the input before including it in the format string, or use a `%s` specifier in the format string, and pass the untrusted data as corresponding argument.\n\n\n## Example\nThe following program snippet logs information about an unauthorized access attempt. The log message includes the user name, and the user's IP address is passed as an additional argument to `console.log` to be appended to the message:\n\n\n```javascript\nconst app = require(\"express\")();\n\napp.get(\"unauthorized\", function handler(req, res) {\n  let user = req.query.user;\n  let ip = req.connection.remoteAddress;\n  console.log(\"Unauthorized access attempt by \" + user, ip);\n});\n\n```\nHowever, if a malicious user provides `%d` as their user name, `console.log` will instead attempt to format the `ip` argument as a number. Since IP addresses are not valid numbers, the result of this conversion is `NaN`. The resulting log message will read \"Unauthorized access attempt by NaN\", missing all the information that it was trying to log in the first place.\n\nInstead, the user name should be included using the `%s` specifier:\n\n\n```javascript\nconst app = require(\"express\")();\n\napp.get(\"unauthorized\", function handler(req, res) {\n  let user = req.query.user;\n  let ip = req.connection.remoteAddress;\n  console.log(\"Unauthorized access attempt by %s\", user, ip);\n});\n\n```\n\n## References\n* Node.js Documentation: [util.format](https://nodejs.org/api/util.html#util_util_format_format_args).\n* Common Weakness Enumeration: [CWE-134](https://cwe.mitre.org/data/definitions/134.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"Format string depends on a user-provided value."},"location":{"path":"src/services/repostDrivenEngine.js","start_line":139,"end_line":139,"start_column":21,"end_column":69},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/349/instances","dismissal_approved_by":null},{"number":348,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/348","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/348","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/tainted-format-string","severity":"warning","description":"Use of externally-controlled format string","name":"js/tainted-format-string","tags":["external/cwe/cwe-134","security"],"full_description":"Using external input in format strings can lead to garbled output.","help":"# Use of externally-controlled format string\nFunctions like the Node.js standard library function `util.format` accept a format string that is used to format the remaining arguments by providing inline format specifiers. If the format string contains unsanitized input from an untrusted source, then that string may contain unexpected format specifiers that cause garbled output.\n\n\n## Recommendation\nEither sanitize the input before including it in the format string, or use a `%s` specifier in the format string, and pass the untrusted data as corresponding argument.\n\n\n## Example\nThe following program snippet logs information about an unauthorized access attempt. The log message includes the user name, and the user's IP address is passed as an additional argument to `console.log` to be appended to the message:\n\n\n```javascript\nconst app = require(\"express\")();\n\napp.get(\"unauthorized\", function handler(req, res) {\n  let user = req.query.user;\n  let ip = req.connection.remoteAddress;\n  console.log(\"Unauthorized access attempt by \" + user, ip);\n});\n\n```\nHowever, if a malicious user provides `%d` as their user name, `console.log` will instead attempt to format the `ip` argument as a number. Since IP addresses are not valid numbers, the result of this conversion is `NaN`. The resulting log message will read \"Unauthorized access attempt by NaN\", missing all the information that it was trying to log in the first place.\n\nInstead, the user name should be included using the `%s` specifier:\n\n\n```javascript\nconst app = require(\"express\")();\n\napp.get(\"unauthorized\", function handler(req, res) {\n  let user = req.query.user;\n  let ip = req.connection.remoteAddress;\n  console.log(\"Unauthorized access attempt by %s\", user, ip);\n});\n\n```\n\n## References\n* Node.js Documentation: [util.format](https://nodejs.org/api/util.html#util_util_format_format_args).\n* Common Weakness Enumeration: [CWE-134](https://cwe.mitre.org/data/definitions/134.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"Format string depends on a user-provided value."},"location":{"path":"src/services/repostDrivenEngine.js","start_line":136,"end_line":136,"start_column":19,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/348/instances","dismissal_approved_by":null},{"number":347,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/347","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/347","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/cors-permissive-configuration","severity":"warning","description":"Permissive CORS configuration","name":"js/cors-permissive-configuration","tags":["external/cwe/cwe-942","security"],"full_description":"Cross-origin resource sharing (CORS) policy allows overly broad access.","help":"# Permissive CORS configuration\nA server can use CORS (Cross-Origin Resource Sharing) to relax the restrictions imposed by the Same-Origin Policy, allowing controlled, secure cross-origin requests when necessary.\n\nA server with an overly permissive CORS configuration may inadvertently expose sensitive data or enable CSRF attacks, which allow attackers to trick users into performing unwanted operations on websites they're authenticated to.\n\n\n## Recommendation\nWhen the `origin` is set to `true`, the server accepts requests from any origin, potentially exposing the system to CSRF attacks. Use `false` as the origin value or implement a whitelist of allowed origins instead.\n\nWhen the `origin` is set to `null`, it can be exploited by an attacker who can deceive a user into making requests from a `null` origin, often hosted within a sandboxed iframe.\n\nIf the `origin` value is user-controlled, ensure that the data is properly sanitized and validated against a whitelist of allowed origins.\n\n\n## Example\nIn the following example, `server_1` accepts requests from any origin because the value of `origin` is set to `true`. `server_2` uses user-controlled data for the origin without validation.\n\n\n```javascript\nimport { ApolloServer } from 'apollo-server';\nvar https = require('https'),\n    url = require('url');\n\nvar server = https.createServer(function () { });\n\nserver.on('request', function (req, res) {\n    // BAD: origin is too permissive\n    const server_1 = new ApolloServer({\n        cors: { origin: true }\n    });\n\n    let user_origin = url.parse(req.url, true).query.origin;\n    // BAD: CORS is controlled by user\n    const server_2 = new ApolloServer({\n        cors: { origin: user_origin }\n    });\n});\n```\nTo fix these issues, `server_1` uses a restrictive CORS configuration that is not vulnerable to CSRF attacks. `server_2` properly validates user-controlled data against a whitelist before using it.\n\n\n```javascript\nimport { ApolloServer } from 'apollo-server';\nvar https = require('https'),\n    url = require('url');\n\nvar server = https.createServer(function () { });\n\nserver.on('request', function (req, res) {\n    // GOOD: origin is restrictive\n    const server_1 = new ApolloServer({\n        cors: { origin: false }\n    });\n\n    let user_origin = url.parse(req.url, true).query.origin;\n    // GOOD: user data is properly sanitized\n    const server_2 = new ApolloServer({\n        cors: { origin: (user_origin === \"https://allowed1.com\" || user_origin === \"https://allowed2.com\") ? user_origin : false }\n    });\n});\n```\n\n## References\n* Mozilla Developer Network: [CORS, Access-Control-Allow-Origin](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin).\n* W3C: [CORS for developers, Advice for Resource Owners](https://w3c.github.io/webappsec-cors-for-developers/#resources).\n* Common Weakness Enumeration: [CWE-942](https://cwe.mitre.org/data/definitions/942.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"CORS Origin allows broad access due to permissive or user controlled value."},"location":{"path":"backend/server.js","start_line":62,"end_line":62,"start_column":11,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/347/instances","dismissal_approved_by":null},{"number":346,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/346","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/346","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/prototype-polluting-assignment","severity":"warning","description":"Prototype-polluting assignment","name":"js/prototype-polluting-assignment","tags":["external/cwe/cwe-078","external/cwe/cwe-079","external/cwe/cwe-094","external/cwe/cwe-400","external/cwe/cwe-471","external/cwe/cwe-915","security"],"full_description":"Modifying an object obtained via a user-controlled property name may lead to accidental mutation of the built-in Object prototype, and possibly escalate to remote code execution or cross-site scripting.","help":"# Prototype-polluting assignment\nMost JavaScript objects inherit the properties of the built-in `Object.prototype` object. Prototype pollution is a type of vulnerability in which an attacker is able to modify `Object.prototype`. Since most objects inherit from the compromised `Object.prototype` object, the attacker can use this to tamper with the application logic, and often escalate to remote code execution or cross-site scripting.\n\nOne way to cause prototype pollution is by modifying an object obtained via a user-controlled property name. Most objects have a special `__proto__` property that refers to `Object.prototype`. An attacker can abuse this special property to trick the application into performing unintended modifications of `Object.prototype`.\n\n\n## Recommendation\nUse an associative data structure that is resilient to untrusted key values, such as a [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map). In some cases, a prototype-less object created with [Object.create(null)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) may be preferable.\n\nAlternatively, restrict the computed property name so it can't clash with a built-in property, either by prefixing it with a constant string, or by rejecting inputs that don't conform to the expected format.\n\n\n## Example\nIn the example below, the untrusted value `req.params.id` is used as the property name `req.session.todos[id]`. If a malicious user passes in the ID value `__proto__`, the variable `items` will then refer to `Object.prototype`. Finally, the modification of `items` then allows the attacker to inject arbitrary properties onto `Object.prototype`.\n\n\n```javascript\nlet express = require('express');\nlet app = express()\n\napp.put('/todos/:id', (req, res) => {\n    let id = req.params.id;\n    let items = req.session.todos[id];\n    if (!items) {\n        items = req.session.todos[id] = {};\n    }\n    items[req.query.name] = req.query.text;\n    res.end(200);\n});\n\n```\nOne way to fix this is to use [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects to associate key/value pairs instead of regular objects, as shown below:\n\n\n```javascript\nlet express = require('express');\nlet app = express()\n\napp.put('/todos/:id', (req, res) => {\n    let id = req.params.id;\n    let items = req.session.todos.get(id);\n    if (!items) {\n        items = new Map();\n        req.sessions.todos.set(id, items);\n    }\n    items.set(req.query.name, req.query.text);\n    res.end(200);\n});\n\n```\nAnother way to fix it is to prevent the `__proto__` property from being used as a key, as shown below:\n\n\n```javascript\nlet express = require('express');\nlet app = express()\n\napp.put('/todos/:id', (req, res) => {\n    let id = req.params.id;\n    if (id === '__proto__' || id === 'constructor' || id === 'prototype') {\n        res.end(403);\n        return;\n    }\n    let items = req.session.todos[id];\n    if (!items) {\n        items = req.session.todos[id] = {};\n    }\n    items[req.query.name] = req.query.text;\n    res.end(200);\n});\n\n```\n\n## References\n* MDN: [Object.prototype.__proto__](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto)\n* MDN: [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n* Common Weakness Enumeration: [CWE-471](https://cwe.mitre.org/data/definitions/471.html).\n* Common Weakness Enumeration: [CWE-915](https://cwe.mitre.org/data/definitions/915.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This assignment may alter Object.prototype if a malicious '__proto__' string is injected from user controlled input.\nThis assignment may alter Object.prototype if a malicious '__proto__' string is injected from user controlled input.\nThis assignment may alter Object.prototype if a malicious '__proto__' string is injected from user controlled input.\nThis assignment may alter Object.prototype if a malicious '__proto__' string is injected from user controlled input."},"location":{"path":"src/routes/variantAdminRoutes.js","start_line":16,"end_line":16,"start_column":34,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/346/instances","dismissal_approved_by":null},{"number":345,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/345","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/345","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-sanitization","severity":"warning","description":"Incomplete string escaping or encoding","name":"js/incomplete-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.","help":"# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This does not escape backslash characters in the input."},"location":{"path":"docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":529510,"end_column":529519},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/345/instances","dismissal_approved_by":null},{"number":344,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/344","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/344","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-sanitization","severity":"warning","description":"Incomplete string escaping or encoding","name":"js/incomplete-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.","help":"# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This does not escape backslash characters in the input."},"location":{"path":"frontend/docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":529510,"end_column":529519},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/344/instances","dismissal_approved_by":null},{"number":343,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/343","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/343","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-sanitization","severity":"warning","description":"Incomplete string escaping or encoding","name":"js/incomplete-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.","help":"# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This does not escape backslash characters in the input."},"location":{"path":"frontend/docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":277282,"end_column":277291},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/343/instances","dismissal_approved_by":null},{"number":342,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/342","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/342","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-sanitization","severity":"warning","description":"Incomplete string escaping or encoding","name":"js/incomplete-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.","help":"# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This does not escape backslash characters in the input."},"location":{"path":"docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":277282,"end_column":277291},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/342/instances","dismissal_approved_by":null},{"number":341,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/341","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/341","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-sanitization","severity":"warning","description":"Incomplete string escaping or encoding","name":"js/incomplete-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.","help":"# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This does not escape backslash characters in the input."},"location":{"path":"src/services/captionsService.js","start_line":86,"end_line":86,"start_column":50,"end_column":70},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/341/instances","dismissal_approved_by":null},{"number":340,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/340","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/340","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"src/server.js","start_line":731,"end_line":731,"start_column":22,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/340/instances","dismissal_approved_by":null},{"number":339,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/339","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/339","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"src/server.js","start_line":730,"end_line":730,"start_column":25,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/339/instances","dismissal_approved_by":null},{"number":338,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/338","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/338","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"src/contentQualityCheck.js","start_line":13,"end_line":13,"start_column":48,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/338/instances","dismissal_approved_by":null},{"number":337,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/337","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/337","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"src/contentQualityCheck.js","start_line":13,"end_line":13,"start_column":27,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/337/instances","dismissal_approved_by":null},{"number":336,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/336","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/336","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"contentQualityCheck.js","start_line":89,"end_line":89,"start_column":21,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/336/instances","dismissal_approved_by":null},{"number":335,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/335","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/335","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"contentQualityCheck.js","start_line":74,"end_line":74,"start_column":25,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/335/instances","dismissal_approved_by":null},{"number":334,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/334","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/334","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"contentQualityCheck.js","start_line":59,"end_line":59,"start_column":25,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/334/instances","dismissal_approved_by":null},{"number":333,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/333","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/333","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"contentQualityCheck.js","start_line":16,"end_line":16,"start_column":21,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/333/instances","dismissal_approved_by":null},{"number":332,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/332","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/332","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"backend/contentQualityCheck.js","start_line":80,"end_line":80,"start_column":19,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/332/instances","dismissal_approved_by":null},{"number":331,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/331","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/331","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"backend/contentQualityCheck.js","start_line":68,"end_line":68,"start_column":25,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/331/instances","dismissal_approved_by":null},{"number":330,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/330","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/330","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"backend/contentQualityCheck.js","start_line":59,"end_line":59,"start_column":25,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/330/instances","dismissal_approved_by":null},{"number":329,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/329","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/329","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/path-injection","severity":"error","description":"Uncontrolled data used in path expression","name":"js/path-injection","tags":["external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099","security"],"full_description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","help":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path.\n\nThe validation method you should use depends on whether you want to allow the user to specify complex paths with multiple components that may span multiple folders, or only simple filenames without a path component.\n\nIn the former case, a common strategy is to make sure that the constructed file path is contained within a safe root folder. First, normalize the path using `path.resolve` or `fs.realpathSync` to remove any \"..\" segments. You should always normalize the file path since an unnormalized path that starts with the root folder can still be used to access files outside the root folder. Then, after you have normalized the path, check that the path starts with the root folder.\n\nIn the latter case, you can use a library like the `sanitize-filename` npm package to eliminate any special characters from the file path. Note that it is *not* sufficient to only remove \"../\" sequences: for example, applying this filter to \".../...//\" would still result in the string \"../\".\n\nFinally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that the user input matches one of these patterns.\n\n\n## Example\nIn the first (bad) example, the code reads the file name from an HTTP request, then accesses that file within a root folder. A malicious user could enter a file name containing \"../\" segments to navigate outside the root folder and access sensitive files.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // BAD: This function uses unsanitized input that can read any file on the file system.\n  res.write(fs.readFileSync(ROOT + filePath, 'utf8'));\n});\n```\nThe second (good) example shows how to avoid access to sensitive files by sanitizing the file path. First, the code resolves the file name relative to a root folder, normalizing the path and removing any \"../\" segments in the process. Then, the code calls `fs.realpathSync` to resolve any symbolic links in the path. Finally, the code checks that the normalized path starts with the path of the root folder, ensuring the file is contained within the root folder.\n\n\n```javascript\nconst fs = require('fs'),\n      http = require('http'),\n      path = require('path'),\n      url = require('url');\n\nconst ROOT = \"/var/www/\";\n\nvar server = http.createServer(function(req, res) {\n  let filePath = url.parse(req.url, true).query.path;\n\n  // GOOD: Verify that the file path is under the root directory\n  filePath = fs.realpathSync(path.resolve(ROOT, filePath));\n  if (!filePath.startsWith(ROOT)) {\n    res.statusCode = 403;\n    res.end();\n    return;\n  }\n  res.write(fs.readFileSync(filePath, 'utf8'));\n});\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [sanitize-filename](https://www.npmjs.com/package/sanitize-filename) package.\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This path depends on a user-provided value."},"location":{"path":"backend/contentQualityCheck.js","start_line":16,"end_line":16,"start_column":21,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/329/instances","dismissal_approved_by":null},{"number":328,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/328","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/328","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/xss-through-dom","severity":"warning","description":"DOM text reinterpreted as HTML","name":"js/xss-through-dom","tags":["external/cwe/cwe-079","external/cwe/cwe-116","security"],"full_description":"Reinterpreting text from the DOM as HTML can lead to a cross-site scripting vulnerability.","help":"# DOM text reinterpreted as HTML\nExtracting text from a DOM node and interpreting it as HTML can lead to a cross-site scripting vulnerability.\n\nA webpage with this vulnerability reads text from the DOM, and afterwards adds the text as HTML to the DOM. Using text from the DOM as HTML effectively unescapes the text, and thereby invalidates any escaping done on the text. If an attacker is able to control the safe sanitized text, then this vulnerability can be exploited to perform a cross-site scripting attack.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing text to the page, or one of the other solutions that are mentioned in the References section below.\n\n\n## Example\nThe following example shows a webpage using a `data-target` attribute to select and manipulate a DOM element using the JQuery library. In the example, the `data-target` attribute is read into the `target` variable, and the `$` function is then supposed to use the `target` variable as a CSS selector to determine which element should be manipulated.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n    $(target).hide();\n});\n\n```\nHowever, if an attacker can control the `data-target` attribute, then the value of `target` can be used to cause the `$` function to execute arbitrary JavaScript.\n\nThe above vulnerability can be fixed by using `$.find` instead of `$`. The `$.find` function will only interpret `target` as a CSS selector and never as HTML, thereby preventing an XSS attack.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n\t$.find(target).hide();\n});\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://owasp.org/www-community/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"DOM text is reinterpreted as HTML without escaping meta-characters."},"location":{"path":"docs/mock/tiktok_oauth_frontend.html","start_line":61,"end_line":61,"start_column":27,"end_column":38},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/328/instances","dismissal_approved_by":null},{"number":327,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/327","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/327","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/reflected-xss","severity":"error","description":"Reflected cross-site scripting","name":"js/reflected-xss","tags":["external/cwe/cwe-079","external/cwe/cwe-116","security"],"full_description":"Writing user input directly to an HTTP response allows for a cross-site scripting vulnerability.","help":"# Reflected cross-site scripting\nDirectly writing user input (for example, an HTTP request parameter) to an HTTP response without properly sanitizing the input first, allows for a cross-site scripting vulnerability.\n\nThis kind of vulnerability is also called *reflected* cross-site scripting, to distinguish it from other types of cross-site scripting.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing user input to the response, or one of the other solutions that are mentioned in the references.\n\n\n## Example\nThe following example code writes part of an HTTP request (which is controlled by the user) directly to the response. This leaves the website vulnerable to cross-site scripting.\n\n\n```javascript\nvar app = require('express')();\n\napp.get('/user/:id', function(req, res) {\n  if (!isValidUserId(req.params.id))\n    // BAD: a request parameter is incorporated without validation into the response\n    res.send(\"Unknown user: \" + req.params.id);\n  else\n    // TODO: do something exciting\n    ;\n});\n\n```\nSanitizing the user-controlled data prevents the vulnerability:\n\n\n```javascript\nvar escape = require('escape-html');\n\nvar app = require('express')();\n\napp.get('/user/:id', function(req, res) {\n  if (!isValidUserId(req.params.id))\n    // GOOD: request parameter is sanitized before incorporating it into the response\n    res.send(\"Unknown user: \" + escape(req.params.id));\n  else\n    // TODO: do something exciting\n    ;\n});\n\n```\n\n## References\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [Types of Cross-Site Scripting](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"Cross-site scripting vulnerability due to a user-provided value."},"location":{"path":"src/routes/twitterAuthRoutes.js","start_line":124,"end_line":124,"start_column":33,"end_column":63},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/327/instances","dismissal_approved_by":null},{"number":326,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/326","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/326","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"src/monetizationService.js","start_line":29,"end_line":29,"start_column":9,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/326/instances","dismissal_approved_by":null},{"number":325,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/325","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/325","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"src/monetizationService.js","start_line":28,"end_line":28,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/325/instances","dismissal_approved_by":null},{"number":324,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/324","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/324","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"monetizationService.js","start_line":29,"end_line":29,"start_column":9,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/324/instances","dismissal_approved_by":null},{"number":323,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/323","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/323","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"monetizationService.js","start_line":28,"end_line":28,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/323/instances","dismissal_approved_by":null},{"number":322,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/322","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/322","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"dist/monetizationService.js","start_line":29,"end_line":29,"start_column":9,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/322/instances","dismissal_approved_by":null},{"number":321,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/321","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/321","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"dist/monetizationService.js","start_line":28,"end_line":28,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/321/instances","dismissal_approved_by":null},{"number":320,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/320","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/320","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context.\nThis uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"backend/monetizationService.js","start_line":29,"end_line":29,"start_column":9,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/320/instances","dismissal_approved_by":null},{"number":319,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/319","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/319","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"backend/monetizationService.js","start_line":28,"end_line":28,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/319/instances","dismissal_approved_by":null},{"number":318,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/318","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/318","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"src/services/collaborationEngine.js","start_line":6,"end_line":6,"start_column":16,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/318/instances","dismissal_approved_by":null},{"number":317,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/317","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/317","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"generateSampleData.js","start_line":222,"end_line":222,"start_column":17,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/317/instances","dismissal_approved_by":null},{"number":316,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/316","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/316","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"generateSampleData.js","start_line":217,"end_line":217,"start_column":17,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/316/instances","dismissal_approved_by":null},{"number":315,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/315","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/315","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"generateSampleData.js","start_line":211,"end_line":211,"start_column":17,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/315/instances","dismissal_approved_by":null},{"number":314,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/314","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/314","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"generateSampleData.js","start_line":205,"end_line":205,"start_column":17,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/314/instances","dismissal_approved_by":null},{"number":313,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/313","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/313","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"generateSampleData.js","start_line":159,"end_line":159,"start_column":15,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/313/instances","dismissal_approved_by":null},{"number":312,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/312","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/312","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"dist/generateSampleData.js","start_line":222,"end_line":222,"start_column":17,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/312/instances","dismissal_approved_by":null},{"number":311,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/311","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/311","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"dist/generateSampleData.js","start_line":217,"end_line":217,"start_column":17,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/311/instances","dismissal_approved_by":null},{"number":310,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/310","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/310","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"dist/generateSampleData.js","start_line":211,"end_line":211,"start_column":17,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/310/instances","dismissal_approved_by":null},{"number":309,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/309","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/309","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"dist/generateSampleData.js","start_line":205,"end_line":205,"start_column":17,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/309/instances","dismissal_approved_by":null},{"number":308,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/308","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/308","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"dist/generateSampleData.js","start_line":159,"end_line":159,"start_column":15,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/308/instances","dismissal_approved_by":null},{"number":307,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/307","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/307","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":494,"end_line":494,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/307/instances","dismissal_approved_by":null},{"number":306,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/306","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/306","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":441,"end_line":441,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/306/instances","dismissal_approved_by":null},{"number":305,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/305","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/305","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":332,"end_line":355,"start_column":47,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/305/instances","dismissal_approved_by":null},{"number":304,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/304","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/304","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":332,"end_line":332,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/304/instances","dismissal_approved_by":null},{"number":303,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/303","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/303","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":280,"end_line":329,"start_column":27,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/303/instances","dismissal_approved_by":null},{"number":302,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/302","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/302","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":262,"end_line":276,"start_column":30,"end_column":4},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/302/instances","dismissal_approved_by":null},{"number":301,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-28T07:50:55Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/301","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/301","assignees":[],"state":"fixed","fixed_at":"2025-10-28T07:50:53Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"d31c91f8c49a25d08c9b1b0934837d5abc00707b","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":203,"end_line":255,"start_column":37,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/301/instances","dismissal_approved_by":null},{"number":300,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-28T07:50:55Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/300","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/300","assignees":[],"state":"fixed","fixed_at":"2025-10-28T07:50:53Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"d31c91f8c49a25d08c9b1b0934837d5abc00707b","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":203,"end_line":203,"start_column":21,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/300/instances","dismissal_approved_by":null},{"number":299,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T12:08:43Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/299","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/299","assignees":[],"state":"fixed","fixed_at":"2025-10-27T12:08:40Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"e9d4f2848ad39e025ed287b8b605019aff57f1d2","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"tiktokRoutes.js","start_line":170,"end_line":198,"start_column":30,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/299/instances","dismissal_approved_by":null},{"number":298,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/298","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/298","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/snapchatRoutes.js","start_line":303,"end_line":303,"start_column":38,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/298/instances","dismissal_approved_by":null},{"number":297,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/297","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/297","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/snapchatRoutes.js","start_line":253,"end_line":253,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/297/instances","dismissal_approved_by":null},{"number":296,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/296","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/296","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/snapchatRoutes.js","start_line":232,"end_line":232,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/296/instances","dismissal_approved_by":null},{"number":295,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/295","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/295","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/userRoutes.js","start_line":245,"end_line":245,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/295/instances","dismissal_approved_by":null},{"number":294,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/294","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/294","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/userRoutes.js","start_line":236,"end_line":236,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/294/instances","dismissal_approved_by":null},{"number":293,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/293","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/293","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/userRoutes.js","start_line":202,"end_line":202,"start_column":17,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/293/instances","dismissal_approved_by":null},{"number":292,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/292","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/292","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/userRoutes.js","start_line":186,"end_line":186,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/292/instances","dismissal_approved_by":null},{"number":291,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/291","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/291","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/userRoutes.js","start_line":164,"end_line":164,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/291/instances","dismissal_approved_by":null},{"number":290,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/290","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/290","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/userRoutes.js","start_line":134,"end_line":134,"start_column":22,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/290/instances","dismissal_approved_by":null},{"number":289,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/289","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/289","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/userRoutes.js","start_line":106,"end_line":106,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/289/instances","dismissal_approved_by":null},{"number":288,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/288","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/288","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/userRoutes.js","start_line":71,"end_line":71,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/288/instances","dismissal_approved_by":null},{"number":287,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/287","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/287","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/userRoutes.js","start_line":36,"end_line":36,"start_column":19,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/287/instances","dismissal_approved_by":null},{"number":286,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/286","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/286","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/userRoutes.js","start_line":7,"end_line":7,"start_column":19,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/286/instances","dismissal_approved_by":null},{"number":285,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/285","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/285","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/snapchatRoutes.js","start_line":59,"end_line":59,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/285/instances","dismissal_approved_by":null},{"number":284,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/284","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/284","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"src/server.js","start_line":1060,"end_line":1062,"start_column":14,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/284/instances","dismissal_approved_by":null},{"number":283,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/283","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/283","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/server.js","start_line":1012,"end_line":1012,"start_column":32,"end_column":59},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/283/instances","dismissal_approved_by":null},{"number":282,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/282","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/282","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"src/server.js","start_line":818,"end_line":825,"start_column":29,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/282/instances","dismissal_approved_by":null},{"number":281,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/281","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/281","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"src/server.js","start_line":808,"end_line":815,"start_column":25,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/281/instances","dismissal_approved_by":null},{"number":280,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/280","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/280","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"src/server.js","start_line":798,"end_line":805,"start_column":24,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/280/instances","dismissal_approved_by":null},{"number":279,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/279","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/279","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"src/server.js","start_line":789,"end_line":791,"start_column":27,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/279/instances","dismissal_approved_by":null},{"number":278,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/278","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/278","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"src/server.js","start_line":785,"end_line":787,"start_column":19,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/278/instances","dismissal_approved_by":null},{"number":277,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/277","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/277","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"src/server.js","start_line":781,"end_line":783,"start_column":21,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/277/instances","dismissal_approved_by":null},{"number":276,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/276","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/276","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited.\nThis route handler performs a file system access, but is not rate-limited."},"location":{"path":"src/server.js","start_line":707,"end_line":719,"start_column":27,"end_column":4},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/276/instances","dismissal_approved_by":null},{"number":275,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/275","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/275","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a database access, but is not rate-limited."},"location":{"path":"src/server.js","start_line":605,"end_line":605,"start_column":20,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/275/instances","dismissal_approved_by":null},{"number":274,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/274","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/274","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/youtubeRoutes.js","start_line":248,"end_line":248,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/274/instances","dismissal_approved_by":null},{"number":273,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/273","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/273","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/youtubeRoutes.js","start_line":235,"end_line":235,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/273/instances","dismissal_approved_by":null},{"number":272,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/272","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/272","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/youtubeRoutes.js","start_line":213,"end_line":213,"start_column":22,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/272/instances","dismissal_approved_by":null},{"number":271,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/271","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/271","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/youtubeRoutes.js","start_line":189,"end_line":189,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/271/instances","dismissal_approved_by":null},{"number":270,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/270","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/270","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":501,"end_line":501,"start_column":35,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/270/instances","dismissal_approved_by":null},{"number":269,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/269","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/269","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":434,"end_line":434,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/269/instances","dismissal_approved_by":null},{"number":268,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/268","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/268","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/youtubeRoutes.js","start_line":71,"end_line":96,"start_column":27,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/268/instances","dismissal_approved_by":null},{"number":267,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/267","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/267","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":392,"end_line":392,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/267/instances","dismissal_approved_by":null},{"number":266,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/266","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/266","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":368,"end_line":368,"start_column":42,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/266/instances","dismissal_approved_by":null},{"number":265,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/265","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/265","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":308,"end_line":308,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/265/instances","dismissal_approved_by":null},{"number":264,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/264","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/264","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":242,"end_line":242,"start_column":41,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/264/instances","dismissal_approved_by":null},{"number":263,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/263","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/263","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":194,"end_line":194,"start_column":42,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/263/instances","dismissal_approved_by":null},{"number":262,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/262","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/262","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":153,"end_line":153,"start_column":36,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/262/instances","dismissal_approved_by":null},{"number":261,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T12:08:43Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/261","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/261","assignees":[],"state":"fixed","fixed_at":"2025-10-27T12:08:40Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"e9d4f2848ad39e025ed287b8b605019aff57f1d2","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":64,"end_line":64,"start_column":34,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/261/instances","dismissal_approved_by":null},{"number":260,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T12:08:43Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/260","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/260","assignees":[],"state":"fixed","fixed_at":"2025-10-27T12:08:40Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"e9d4f2848ad39e025ed287b8b605019aff57f1d2","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/viralGrowthRoutes.js","start_line":22,"end_line":22,"start_column":35,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/260/instances","dismissal_approved_by":null},{"number":259,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/259","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/259","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/withdrawalRoutes.js","start_line":121,"end_line":121,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/259/instances","dismissal_approved_by":null},{"number":258,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/258","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/258","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/withdrawalRoutes.js","start_line":66,"end_line":66,"start_column":29,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/258/instances","dismissal_approved_by":null},{"number":257,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/257","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/257","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/withdrawalRoutes.js","start_line":13,"end_line":13,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/257/instances","dismissal_approved_by":null},{"number":256,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/256","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/256","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/variantStrategyStatsRoutes.js","start_line":48,"end_line":48,"start_column":40,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/256/instances","dismissal_approved_by":null},{"number":255,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/255","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/255","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/variantStrategyStatsRoutes.js","start_line":32,"end_line":32,"start_column":34,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/255/instances","dismissal_approved_by":null},{"number":254,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/254","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/254","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/variantStrategyStatsRoutes.js","start_line":21,"end_line":21,"start_column":33,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/254/instances","dismissal_approved_by":null},{"number":253,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/253","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/253","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/variantAdminRoutes.js","start_line":86,"end_line":86,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/253/instances","dismissal_approved_by":null},{"number":252,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/252","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/252","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/variantStrategyStatsRoutes.js","start_line":8,"end_line":8,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/252/instances","dismissal_approved_by":null},{"number":251,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/251","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/251","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/variantAdminRoutes.js","start_line":77,"end_line":77,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/251/instances","dismissal_approved_by":null},{"number":250,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/250","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/250","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/variantAdminRoutes.js","start_line":65,"end_line":65,"start_column":29,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/250/instances","dismissal_approved_by":null},{"number":249,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/249","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/249","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/variantAdminRoutes.js","start_line":55,"end_line":55,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/249/instances","dismissal_approved_by":null},{"number":248,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/248","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/248","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/variantAdminRoutes.js","start_line":45,"end_line":45,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/248/instances","dismissal_approved_by":null},{"number":247,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/247","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/247","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/variantAdminRoutes.js","start_line":22,"end_line":22,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/247/instances","dismissal_approved_by":null},{"number":246,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/246","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/246","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/twitterAuthRoutes.js","start_line":240,"end_line":240,"start_column":33,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/246/instances","dismissal_approved_by":null},{"number":245,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/245","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/245","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/twitterAuthRoutes.js","start_line":218,"end_line":218,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/245/instances","dismissal_approved_by":null},{"number":244,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/244","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/244","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/twitterAuthRoutes.js","start_line":206,"end_line":206,"start_column":39,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/244/instances","dismissal_approved_by":null},{"number":243,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/243","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/243","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/twitterAuthRoutes.js","start_line":160,"end_line":160,"start_column":34,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/243/instances","dismissal_approved_by":null},{"number":242,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/242","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/242","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/twitterAuthRoutes.js","start_line":120,"end_line":149,"start_column":31,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/242/instances","dismissal_approved_by":null},{"number":241,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/241","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/241","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/twitterAuthRoutes.js","start_line":100,"end_line":117,"start_column":47,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/241/instances","dismissal_approved_by":null},{"number":240,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/240","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/240","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/twitterAuthRoutes.js","start_line":100,"end_line":100,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/240/instances","dismissal_approved_by":null},{"number":239,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/239","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/239","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/twitterAuthRoutes.js","start_line":80,"end_line":97,"start_column":44,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/239/instances","dismissal_approved_by":null},{"number":238,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/238","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/238","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/twitterAuthRoutes.js","start_line":80,"end_line":80,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/238/instances","dismissal_approved_by":null},{"number":237,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/237","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/237","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/twitterAuthRoutes.js","start_line":48,"end_line":77,"start_column":32,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/237/instances","dismissal_approved_by":null},{"number":236,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/236","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/236","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/platformRoutes.js","start_line":531,"end_line":531,"start_column":42,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/236/instances","dismissal_approved_by":null},{"number":235,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/235","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/235","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/stripeOnboardRoutes.js","start_line":116,"end_line":132,"start_column":118,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/235/instances","dismissal_approved_by":null},{"number":234,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/234","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/234","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/stripeOnboardRoutes.js","start_line":116,"end_line":116,"start_column":36,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/234/instances","dismissal_approved_by":null},{"number":233,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/233","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/233","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/platformRoutes.js","start_line":394,"end_line":394,"start_column":42,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/233/instances","dismissal_approved_by":null},{"number":232,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/232","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/232","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/stripeOnboardRoutes.js","start_line":69,"end_line":69,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/232/instances","dismissal_approved_by":null},{"number":231,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/231","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/231","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/stripeOnboardRoutes.js","start_line":22,"end_line":22,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/231/instances","dismissal_approved_by":null},{"number":230,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/230","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/230","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/repostRoutes.js","start_line":184,"end_line":184,"start_column":55,"end_column":69},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/230/instances","dismissal_approved_by":null},{"number":229,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/229","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/229","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/repostRoutes.js","start_line":164,"end_line":164,"start_column":39,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/229/instances","dismissal_approved_by":null},{"number":228,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/228","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/228","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/repostRoutes.js","start_line":137,"end_line":137,"start_column":44,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/228/instances","dismissal_approved_by":null},{"number":227,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/227","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/227","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/repostRoutes.js","start_line":97,"end_line":97,"start_column":34,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/227/instances","dismissal_approved_by":null},{"number":226,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/226","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/226","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/platformRoutes.js","start_line":124,"end_line":124,"start_column":41,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/226/instances","dismissal_approved_by":null},{"number":225,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/225","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/225","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/repostRoutes.js","start_line":73,"end_line":73,"start_column":44,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/225/instances","dismissal_approved_by":null},{"number":224,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/224","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/224","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/repostRoutes.js","start_line":54,"end_line":54,"start_column":39,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/224/instances","dismissal_approved_by":null},{"number":223,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T12:08:43Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/223","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/223","assignees":[],"state":"fixed","fixed_at":"2025-10-27T12:08:40Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"e9d4f2848ad39e025ed287b8b605019aff57f1d2","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/repostRoutes.js","start_line":10,"end_line":10,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/223/instances","dismissal_approved_by":null},{"number":222,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/222","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/222","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/platformRoutes.js","start_line":52,"end_line":52,"start_column":40,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/222/instances","dismissal_approved_by":null},{"number":221,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T12:08:43Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/221","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/221","assignees":[],"state":"fixed","fixed_at":"2025-10-27T12:08:40Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"e9d4f2848ad39e025ed287b8b605019aff57f1d2","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/platformRoutes.js","start_line":27,"end_line":27,"start_column":33,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/221/instances","dismissal_approved_by":null},{"number":220,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/220","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/220","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/promotionTaskRoutes.js","start_line":109,"end_line":109,"start_column":34,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/220/instances","dismissal_approved_by":null},{"number":219,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/219","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/219","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/promotionTaskRoutes.js","start_line":96,"end_line":96,"start_column":29,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/219/instances","dismissal_approved_by":null},{"number":218,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/218","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/218","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/promotionTaskRoutes.js","start_line":85,"end_line":85,"start_column":36,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/218/instances","dismissal_approved_by":null},{"number":217,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/217","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/217","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/promotionTaskRoutes.js","start_line":66,"end_line":66,"start_column":41,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/217/instances","dismissal_approved_by":null},{"number":216,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/216","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/216","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/promotionTaskRoutes.js","start_line":56,"end_line":56,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/216/instances","dismissal_approved_by":null},{"number":215,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/215","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/215","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/promotionTaskRoutes.js","start_line":13,"end_line":13,"start_column":33,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/215/instances","dismissal_approved_by":null},{"number":214,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/214","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/214","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/profileDefaultsRoutes.js","start_line":55,"end_line":55,"start_column":34,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/214/instances","dismissal_approved_by":null},{"number":213,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/213","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/213","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/profileDefaultsRoutes.js","start_line":34,"end_line":34,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/213/instances","dismissal_approved_by":null},{"number":212,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/212","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/212","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/profileDefaultsRoutes.js","start_line":24,"end_line":24,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/212/instances","dismissal_approved_by":null},{"number":211,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/211","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/211","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/platformConnectionsRoutes.js","start_line":30,"end_line":30,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/211/instances","dismissal_approved_by":null},{"number":210,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T12:08:43Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/210","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/210","assignees":[],"state":"fixed","fixed_at":"2025-10-27T12:08:40Z","dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"fixed","commit_sha":"e9d4f2848ad39e025ed287b8b605019aff57f1d2","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/paypalWebhookRoutes.js","start_line":167,"end_line":234,"start_column":79,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/210/instances","dismissal_approved_by":null},{"number":209,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/209","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/209","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/metricsRoutes.js","start_line":665,"end_line":665,"start_column":20,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/209/instances","dismissal_approved_by":null},{"number":208,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/208","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/208","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/paypalWebhookRoutes.js","start_line":111,"end_line":111,"start_column":29,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/208/instances","dismissal_approved_by":null},{"number":207,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/207","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/207","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/metricsRoutes.js","start_line":652,"end_line":652,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/207/instances","dismissal_approved_by":null},{"number":206,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/206","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/206","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/paypalWebhookRoutes.js","start_line":97,"end_line":97,"start_column":35,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/206/instances","dismissal_approved_by":null},{"number":205,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/205","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/205","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/metricsRoutes.js","start_line":616,"end_line":616,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/205/instances","dismissal_approved_by":null},{"number":204,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/204","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/204","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/paypalWebhookRoutes.js","start_line":81,"end_line":81,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/204/instances","dismissal_approved_by":null},{"number":203,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/203","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/203","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/metricsRoutes.js","start_line":477,"end_line":477,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/203/instances","dismissal_approved_by":null},{"number":202,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/202","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/202","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/metricsRoutes.js","start_line":446,"end_line":446,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/202/instances","dismissal_approved_by":null},{"number":201,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/201","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/201","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/metricsRoutes.js","start_line":392,"end_line":392,"start_column":40,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/201/instances","dismissal_approved_by":null},{"number":200,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/200","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/200","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/paymentsStatusRoutes.js","start_line":35,"end_line":35,"start_column":33,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/200/instances","dismissal_approved_by":null},{"number":199,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/199","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/199","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/paymentsStatusRoutes.js","start_line":24,"end_line":24,"start_column":39,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/199/instances","dismissal_approved_by":null},{"number":198,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/198","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/198","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/paymentsStatusRoutes.js","start_line":11,"end_line":11,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/198/instances","dismissal_approved_by":null},{"number":197,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/197","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/197","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/metricsRoutes.js","start_line":326,"end_line":326,"start_column":38,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/197/instances","dismissal_approved_by":null},{"number":196,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/196","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/196","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/metricsRoutes.js","start_line":272,"end_line":272,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/196/instances","dismissal_approved_by":null},{"number":195,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/195","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/195","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/metricsRoutes.js","start_line":261,"end_line":261,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/195/instances","dismissal_approved_by":null},{"number":194,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/194","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/194","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/paymentsExtendedRoutes.js","start_line":31,"end_line":31,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/194/instances","dismissal_approved_by":null},{"number":193,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/193","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/193","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/paymentsExtendedRoutes.js","start_line":11,"end_line":11,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/193/instances","dismissal_approved_by":null},{"number":192,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/192","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/192","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/notificationsRoutes.js","start_line":34,"end_line":34,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/192/instances","dismissal_approved_by":null},{"number":191,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/191","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/191","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/notificationsRoutes.js","start_line":20,"end_line":20,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/191/instances","dismissal_approved_by":null},{"number":190,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/190","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/190","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/notificationsRoutes.js","start_line":8,"end_line":8,"start_column":17,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/190/instances","dismissal_approved_by":null},{"number":189,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/189","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/189","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/metricsRoutes.js","start_line":36,"end_line":36,"start_column":35,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/189/instances","dismissal_approved_by":null},{"number":188,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/188","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/188","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":357,"end_line":357,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/188/instances","dismissal_approved_by":null},{"number":187,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/187","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/187","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":339,"end_line":339,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/187/instances","dismissal_approved_by":null},{"number":186,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/186","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/186","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":311,"end_line":311,"start_column":38,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/186/instances","dismissal_approved_by":null},{"number":185,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/185","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/185","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":292,"end_line":292,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/185/instances","dismissal_approved_by":null},{"number":184,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/184","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/184","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":268,"end_line":268,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/184/instances","dismissal_approved_by":null},{"number":183,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/183","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/183","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":250,"end_line":250,"start_column":32,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/183/instances","dismissal_approved_by":null},{"number":182,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/182","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/182","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":232,"end_line":232,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/182/instances","dismissal_approved_by":null},{"number":181,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/181","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/181","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":180,"end_line":180,"start_column":33,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/181/instances","dismissal_approved_by":null},{"number":180,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/180","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/180","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":162,"end_line":162,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/180/instances","dismissal_approved_by":null},{"number":179,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/179","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/179","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":143,"end_line":143,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/179/instances","dismissal_approved_by":null},{"number":178,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/178","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/178","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":115,"end_line":115,"start_column":33,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/178/instances","dismissal_approved_by":null},{"number":177,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/177","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/177","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":88,"end_line":88,"start_column":39,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/177/instances","dismissal_approved_by":null},{"number":176,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/176","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/176","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":60,"end_line":60,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/176/instances","dismissal_approved_by":null},{"number":175,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/175","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/175","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":38,"end_line":38,"start_column":36,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/175/instances","dismissal_approved_by":null},{"number":174,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/174","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/174","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/monetizationRoutes.js","start_line":11,"end_line":11,"start_column":40,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/174/instances","dismissal_approved_by":null},{"number":173,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/173","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/173","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/facebookRoutes.js","start_line":257,"end_line":257,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/173/instances","dismissal_approved_by":null},{"number":172,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/172","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/172","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/facebookRoutes.js","start_line":218,"end_line":218,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/172/instances","dismissal_approved_by":null},{"number":171,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/171","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/171","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/facebookRoutes.js","start_line":92,"end_line":117,"start_column":27,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/171/instances","dismissal_approved_by":null},{"number":170,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/170","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/170","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/instagramRoutes.js","start_line":22,"end_line":22,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/170/instances","dismissal_approved_by":null},{"number":169,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/169","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/169","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/instagramRoutes.js","start_line":11,"end_line":11,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/169/instances","dismissal_approved_by":null},{"number":168,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/168","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/168","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/aggregateStatusRoutes.js","start_line":9,"end_line":9,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/168/instances","dismissal_approved_by":null},{"number":167,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/167","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/167","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminSecurityRoutes.js","start_line":59,"end_line":59,"start_column":22,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/167/instances","dismissal_approved_by":null},{"number":166,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/166","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/166","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminOpsRoutes.js","start_line":68,"end_line":68,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/166/instances","dismissal_approved_by":null},{"number":165,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/165","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/165","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminSecurityRoutes.js","start_line":30,"end_line":30,"start_column":33,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/165/instances","dismissal_approved_by":null},{"number":164,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/164","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/164","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminOpsRoutes.js","start_line":59,"end_line":59,"start_column":34,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/164/instances","dismissal_approved_by":null},{"number":163,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/163","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/163","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminSecurityRoutes.js","start_line":9,"end_line":9,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/163/instances","dismissal_approved_by":null},{"number":162,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/162","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/162","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminOpsRoutes.js","start_line":29,"end_line":29,"start_column":29,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/162/instances","dismissal_approved_by":null},{"number":161,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/161","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/161","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminOpsRoutes.js","start_line":23,"end_line":23,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/161/instances","dismissal_approved_by":null},{"number":160,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/160","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/160","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminOpsRoutes.js","start_line":14,"end_line":14,"start_column":35,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/160/instances","dismissal_approved_by":null},{"number":159,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/159","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/159","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminOpsRoutes.js","start_line":8,"end_line":8,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/159/instances","dismissal_approved_by":null},{"number":158,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/158","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/158","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminDashboardRoutes.js","start_line":123,"end_line":123,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/158/instances","dismissal_approved_by":null},{"number":157,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/157","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/157","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminDashboardRoutes.js","start_line":118,"end_line":118,"start_column":27,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/157/instances","dismissal_approved_by":null},{"number":156,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/156","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/156","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminDashboardRoutes.js","start_line":112,"end_line":112,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/156/instances","dismissal_approved_by":null},{"number":155,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/155","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/155","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminDashboardRoutes.js","start_line":103,"end_line":103,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/155/instances","dismissal_approved_by":null},{"number":154,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/154","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/154","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminDashboardRoutes.js","start_line":71,"end_line":71,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/154/instances","dismissal_approved_by":null},{"number":153,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/153","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/153","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminMetricsRoutes.js","start_line":13,"end_line":13,"start_column":30,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/153/instances","dismissal_approved_by":null},{"number":152,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/152","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/152","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminEmailVerificationRoutes.js","start_line":26,"end_line":47,"start_column":78,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/152/instances","dismissal_approved_by":null},{"number":151,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/151","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/151","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminEmailVerificationRoutes.js","start_line":26,"end_line":26,"start_column":48,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/151/instances","dismissal_approved_by":null},{"number":150,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/150","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/150","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminEmailVerificationRoutes.js","start_line":15,"end_line":23,"start_column":76,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/150/instances","dismissal_approved_by":null},{"number":149,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/149","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/149","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminEmailVerificationRoutes.js","start_line":15,"end_line":15,"start_column":46,"end_column":60},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/149/instances","dismissal_approved_by":null},{"number":148,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/148","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/148","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminConfigRoutes.js","start_line":48,"end_line":48,"start_column":27,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/148/instances","dismissal_approved_by":null},{"number":147,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/147","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/147","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminConfigRoutes.js","start_line":23,"end_line":23,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/147/instances","dismissal_approved_by":null},{"number":146,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/146","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/146","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminConfigRoutes.js","start_line":14,"end_line":14,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/146/instances","dismissal_approved_by":null},{"number":145,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/145","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/145","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminConfigRoutes.js","start_line":10,"end_line":10,"start_column":17,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/145/instances","dismissal_approved_by":null},{"number":144,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/144","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/144","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminCacheRoutes.js","start_line":13,"end_line":13,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/144/instances","dismissal_approved_by":null},{"number":143,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/143","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/143","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminBanditRoutes.js","start_line":34,"end_line":34,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/143/instances","dismissal_approved_by":null},{"number":142,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/142","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/142","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminBanditRoutes.js","start_line":22,"end_line":22,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/142/instances","dismissal_approved_by":null},{"number":141,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/141","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/141","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminAlertsRoutes.js","start_line":27,"end_line":27,"start_column":22,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/141/instances","dismissal_approved_by":null},{"number":140,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/140","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/140","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/routes/adminAlertsRoutes.js","start_line":8,"end_line":8,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/140/instances","dismissal_approved_by":null},{"number":139,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/139","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/139","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/contentRoutes.js","start_line":521,"end_line":521,"start_column":41,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/139/instances","dismissal_approved_by":null},{"number":138,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/138","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/138","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/contentRoutes.js","start_line":501,"end_line":501,"start_column":33,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/138/instances","dismissal_approved_by":null},{"number":137,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/137","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/137","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/contentRoutes.js","start_line":481,"end_line":481,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/137/instances","dismissal_approved_by":null},{"number":136,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/136","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/136","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/contentRoutes.js","start_line":469,"end_line":469,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/136/instances","dismissal_approved_by":null},{"number":135,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/135","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/135","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/contentRoutes.js","start_line":445,"end_line":445,"start_column":51,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/135/instances","dismissal_approved_by":null},{"number":134,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/134","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/134","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/contentRoutes.js","start_line":389,"end_line":389,"start_column":57,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/134/instances","dismissal_approved_by":null},{"number":133,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/133","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/133","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/contentRoutes.js","start_line":370,"end_line":370,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/133/instances","dismissal_approved_by":null},{"number":132,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/132","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/132","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/contentRoutes.js","start_line":351,"end_line":351,"start_column":20,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/132/instances","dismissal_approved_by":null},{"number":131,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/131","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/131","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/contentRoutes.js","start_line":316,"end_line":316,"start_column":39,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/131/instances","dismissal_approved_by":null},{"number":130,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/130","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/130","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/contentRoutes.js","start_line":296,"end_line":296,"start_column":27,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/130/instances","dismissal_approved_by":null},{"number":129,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/129","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/129","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/contentRoutes.js","start_line":74,"end_line":74,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/129/instances","dismissal_approved_by":null},{"number":128,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/128","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/128","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/authRoutes.js","start_line":497,"end_line":587,"start_column":23,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/128/instances","dismissal_approved_by":null},{"number":127,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/127","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/127","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/authRoutes.js","start_line":341,"end_line":494,"start_column":29,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/127/instances","dismissal_approved_by":null},{"number":126,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/126","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/126","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/authRoutes.js","start_line":137,"end_line":338,"start_column":23,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/126/instances","dismissal_approved_by":null},{"number":125,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/125","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/125","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"src/authRoutes.js","start_line":127,"end_line":134,"start_column":32,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/125/instances","dismissal_approved_by":null},{"number":124,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/124","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/124","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/authRoutes.js","start_line":104,"end_line":124,"start_column":40,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/124/instances","dismissal_approved_by":null},{"number":123,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/123","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/123","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"src/authRoutes.js","start_line":94,"end_line":101,"start_column":30,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/123/instances","dismissal_approved_by":null},{"number":122,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/122","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/122","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/authRoutes.js","start_line":68,"end_line":91,"start_column":37,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/122/instances","dismissal_approved_by":null},{"number":121,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/121","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/121","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/authRoutes.js","start_line":24,"end_line":65,"start_column":26,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/121/instances","dismissal_approved_by":null},{"number":120,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/120","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/120","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/analyticsRoutes.js","start_line":43,"end_line":43,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/120/instances","dismissal_approved_by":null},{"number":119,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/119","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/119","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/analyticsRoutes.js","start_line":7,"end_line":7,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/119/instances","dismissal_approved_by":null},{"number":118,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/118","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/118","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminAnalyticsRoutes.js","start_line":580,"end_line":580,"start_column":38,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/118/instances","dismissal_approved_by":null},{"number":117,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/117","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/117","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminAnalyticsRoutes.js","start_line":537,"end_line":537,"start_column":45,"end_column":59},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/117/instances","dismissal_approved_by":null},{"number":116,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/116","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/116","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminAnalyticsRoutes.js","start_line":487,"end_line":487,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/116/instances","dismissal_approved_by":null},{"number":115,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/115","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/115","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminTestRoutes.js","start_line":110,"end_line":182,"start_column":33,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/115/instances","dismissal_approved_by":null},{"number":114,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/114","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/114","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminAnalyticsRoutes.js","start_line":413,"end_line":413,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/114/instances","dismissal_approved_by":null},{"number":113,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/113","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/113","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminAnalyticsRoutes.js","start_line":360,"end_line":360,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/113/instances","dismissal_approved_by":null},{"number":112,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/112","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/112","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminAnalyticsRoutes.js","start_line":308,"end_line":308,"start_column":22,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/112/instances","dismissal_approved_by":null},{"number":111,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/111","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/111","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminRoutes.js","start_line":300,"end_line":300,"start_column":35,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/111/instances","dismissal_approved_by":null},{"number":110,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/110","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/110","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminRoutes.js","start_line":243,"end_line":243,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/110/instances","dismissal_approved_by":null},{"number":109,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/109","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/109","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminAnalyticsRoutes.js","start_line":8,"end_line":8,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/109/instances","dismissal_approved_by":null},{"number":108,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/108","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/108","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminRoutes.js","start_line":194,"end_line":194,"start_column":29,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/108/instances","dismissal_approved_by":null},{"number":107,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/107","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/107","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminRoutes.js","start_line":158,"end_line":158,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/107/instances","dismissal_approved_by":null},{"number":106,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/106","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/106","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminRoutes.js","start_line":126,"end_line":126,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/106/instances","dismissal_approved_by":null},{"number":105,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/105","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/105","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminRoutes.js","start_line":85,"end_line":85,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/105/instances","dismissal_approved_by":null},{"number":104,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/104","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/104","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminRoutes.js","start_line":61,"end_line":61,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/104/instances","dismissal_approved_by":null},{"number":103,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/103","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/103","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"src/adminRoutes.js","start_line":37,"end_line":37,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/103/instances","dismissal_approved_by":null},{"number":102,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/102","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/102","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"routes/withdrawalRoutes.js","start_line":117,"end_line":117,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/102/instances","dismissal_approved_by":null},{"number":101,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/101","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/101","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"routes/withdrawalRoutes.js","start_line":62,"end_line":62,"start_column":29,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/101/instances","dismissal_approved_by":null},{"number":100,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/100","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/100","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"routes/withdrawalRoutes.js","start_line":9,"end_line":9,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/100/instances","dismissal_approved_by":null},{"number":99,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/99","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/99","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"routes/stripeOnboardRoutes.js","start_line":16,"end_line":16,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/99/instances","dismissal_approved_by":null},{"number":98,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/98","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/98","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"routes/monetizationRoutes.js","start_line":111,"end_line":111,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/98/instances","dismissal_approved_by":null},{"number":97,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/97","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/97","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"routes/monetizationRoutes.js","start_line":99,"end_line":99,"start_column":39,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/97/instances","dismissal_approved_by":null},{"number":96,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/96","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/96","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"routes/monetizationRoutes.js","start_line":85,"end_line":85,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/96/instances","dismissal_approved_by":null},{"number":95,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/95","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/95","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"routes/monetizationRoutes.js","start_line":67,"end_line":67,"start_column":38,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/95/instances","dismissal_approved_by":null},{"number":94,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/94","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/94","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"routes/monetizationRoutes.js","start_line":39,"end_line":39,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/94/instances","dismissal_approved_by":null},{"number":93,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/93","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/93","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"routes/monetizationRoutes.js","start_line":27,"end_line":27,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/93/instances","dismissal_approved_by":null},{"number":92,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/92","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/92","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"routes/monetizationRoutes.js","start_line":9,"end_line":9,"start_column":34,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/92/instances","dismissal_approved_by":null},{"number":91,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/91","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/91","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"dist/adminTestRoutes.js","start_line":110,"end_line":182,"start_column":33,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/91/instances","dismissal_approved_by":null},{"number":90,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/90","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/90","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":854,"end_line":854,"start_column":39,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/90/instances","dismissal_approved_by":null},{"number":89,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/89","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/89","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":825,"end_line":825,"start_column":40,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/89/instances","dismissal_approved_by":null},{"number":88,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/88","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/88","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":725,"end_line":725,"start_column":57,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/88/instances","dismissal_approved_by":null},{"number":87,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/87","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/87","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":700,"end_line":700,"start_column":52,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/87/instances","dismissal_approved_by":null},{"number":86,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/86","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/86","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":664,"end_line":664,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/86/instances","dismissal_approved_by":null},{"number":85,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/85","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/85","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":640,"end_line":640,"start_column":58,"end_column":72},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/85/instances","dismissal_approved_by":null},{"number":84,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/84","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/84","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":601,"end_line":601,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/84/instances","dismissal_approved_by":null},{"number":83,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/83","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/83","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":560,"end_line":560,"start_column":30,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/83/instances","dismissal_approved_by":null},{"number":82,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/82","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/82","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":519,"end_line":519,"start_column":29,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/82/instances","dismissal_approved_by":null},{"number":81,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/81","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/81","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":474,"end_line":474,"start_column":33,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/81/instances","dismissal_approved_by":null},{"number":80,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/80","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/80","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":463,"end_line":463,"start_column":51,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/80/instances","dismissal_approved_by":null},{"number":79,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/79","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/79","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":452,"end_line":452,"start_column":48,"end_column":62},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/79/instances","dismissal_approved_by":null},{"number":78,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/78","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/78","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":429,"end_line":429,"start_column":41,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/78/instances","dismissal_approved_by":null},{"number":77,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/77","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/77","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":406,"end_line":406,"start_column":40,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/77/instances","dismissal_approved_by":null},{"number":76,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/76","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/76","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":336,"end_line":336,"start_column":29,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/76/instances","dismissal_approved_by":null},{"number":75,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/75","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/75","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":318,"end_line":318,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/75/instances","dismissal_approved_by":null},{"number":74,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/74","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/74","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":289,"end_line":289,"start_column":20,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/74/instances","dismissal_approved_by":null},{"number":73,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/73","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/73","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":269,"end_line":269,"start_column":20,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/73/instances","dismissal_approved_by":null},{"number":72,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/72","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/72","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":239,"end_line":239,"start_column":27,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/72/instances","dismissal_approved_by":null},{"number":71,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/71","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/71","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/userRoutes.js","start_line":100,"end_line":100,"start_column":17,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/71/instances","dismissal_approved_by":null},{"number":70,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/70","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/70","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/userRoutes.js","start_line":70,"end_line":70,"start_column":22,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/70/instances","dismissal_approved_by":null},{"number":69,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/69","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/69","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/userRoutes.js","start_line":42,"end_line":42,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/69/instances","dismissal_approved_by":null},{"number":68,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/68","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/68","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/contentRoutes.js","start_line":98,"end_line":98,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/68/instances","dismissal_approved_by":null},{"number":67,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/67","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/67","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/userRoutes.js","start_line":7,"end_line":7,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/67/instances","dismissal_approved_by":null},{"number":66,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/66","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/66","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"backend/server.js","start_line":128,"end_line":130,"start_column":14,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/66/instances","dismissal_approved_by":null},{"number":65,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/65","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/65","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"backend/server.js","start_line":108,"end_line":115,"start_column":29,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/65/instances","dismissal_approved_by":null},{"number":64,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/64","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/64","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"backend/server.js","start_line":98,"end_line":105,"start_column":25,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/64/instances","dismissal_approved_by":null},{"number":63,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/63","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/63","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"backend/server.js","start_line":88,"end_line":95,"start_column":24,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/63/instances","dismissal_approved_by":null},{"number":62,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/62","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/62","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/routes/monetizationRoutes.js","start_line":7,"end_line":7,"start_column":34,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/62/instances","dismissal_approved_by":null},{"number":61,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/61","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/61","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/authRoutes.js","start_line":348,"end_line":438,"start_column":23,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/61/instances","dismissal_approved_by":null},{"number":60,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/60","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/60","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/authRoutes.js","start_line":207,"end_line":345,"start_column":29,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/60/instances","dismissal_approved_by":null},{"number":59,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/59","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/59","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminAnalyticsRoutes.js","start_line":580,"end_line":580,"start_column":38,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/59/instances","dismissal_approved_by":null},{"number":58,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/58","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/58","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/authRoutes.js","start_line":65,"end_line":204,"start_column":23,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/58/instances","dismissal_approved_by":null},{"number":57,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/57","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/57","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/authRoutes.js","start_line":23,"end_line":62,"start_column":26,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/57/instances","dismissal_approved_by":null},{"number":56,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/56","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/56","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminAnalyticsRoutes.js","start_line":537,"end_line":537,"start_column":45,"end_column":59},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/56/instances","dismissal_approved_by":null},{"number":55,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/55","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/55","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminAnalyticsRoutes.js","start_line":487,"end_line":487,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/55/instances","dismissal_approved_by":null},{"number":54,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/54","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/54","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminRoutes.js","start_line":243,"end_line":243,"start_column":26,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/54/instances","dismissal_approved_by":null},{"number":53,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/53","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/53","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminAnalyticsRoutes.js","start_line":413,"end_line":413,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/53/instances","dismissal_approved_by":null},{"number":52,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/52","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/52","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminRoutes.js","start_line":194,"end_line":194,"start_column":29,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/52/instances","dismissal_approved_by":null},{"number":51,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/51","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/51","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminAnalyticsRoutes.js","start_line":360,"end_line":360,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/51/instances","dismissal_approved_by":null},{"number":50,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/50","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/50","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminAnalyticsRoutes.js","start_line":308,"end_line":308,"start_column":22,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/50/instances","dismissal_approved_by":null},{"number":49,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/49","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/49","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminRoutes.js","start_line":158,"end_line":158,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/49/instances","dismissal_approved_by":null},{"number":48,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/48","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/48","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminRoutes.js","start_line":126,"end_line":126,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/48/instances","dismissal_approved_by":null},{"number":47,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/47","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/47","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminRoutes.js","start_line":85,"end_line":85,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/47/instances","dismissal_approved_by":null},{"number":46,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/46","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/46","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminAnalyticsRoutes.js","start_line":8,"end_line":8,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/46/instances","dismissal_approved_by":null},{"number":45,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/45","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/45","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminRoutes.js","start_line":61,"end_line":61,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/45/instances","dismissal_approved_by":null},{"number":44,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/44","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/44","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminRoutes.js","start_line":37,"end_line":37,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/44/instances","dismissal_approved_by":null},{"number":43,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/43","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/43","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/adminTestRoutes.js","start_line":110,"end_line":182,"start_column":33,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/43/instances","dismissal_approved_by":null},{"number":42,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/42","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/42","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/analyticsRoutes.js","start_line":43,"end_line":43,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/42/instances","dismissal_approved_by":null},{"number":41,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/41","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/41","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"backend/analyticsRoutes.js","start_line":7,"end_line":7,"start_column":28,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/41/instances","dismissal_approved_by":null},{"number":40,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/40","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/40","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"adminAnalyticsRoutes.js","start_line":580,"end_line":580,"start_column":38,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/40/instances","dismissal_approved_by":null},{"number":39,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/39","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/39","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"adminAnalyticsRoutes.js","start_line":537,"end_line":537,"start_column":45,"end_column":59},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/39/instances","dismissal_approved_by":null},{"number":38,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/38","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/38","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"adminAnalyticsRoutes.js","start_line":487,"end_line":487,"start_column":31,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/38/instances","dismissal_approved_by":null},{"number":37,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/37","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/37","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"adminAnalyticsRoutes.js","start_line":413,"end_line":413,"start_column":37,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/37/instances","dismissal_approved_by":null},{"number":36,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/36","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/36","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"adminAnalyticsRoutes.js","start_line":360,"end_line":360,"start_column":24,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/36/instances","dismissal_approved_by":null},{"number":35,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/35","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/35","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"adminAnalyticsRoutes.js","start_line":308,"end_line":308,"start_column":22,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/35/instances","dismissal_approved_by":null},{"number":34,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/34","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/34","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited.\nThis route handler performs authorization, but is not rate-limited."},"location":{"path":"adminAnalyticsRoutes.js","start_line":8,"end_line":8,"start_column":25,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/34/instances","dismissal_approved_by":null},{"number":33,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/33","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/33","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This route handler performs authorization, but is not rate-limited."},"location":{"path":"adminTestRoutes.js","start_line":110,"end_line":182,"start_column":33,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/33/instances","dismissal_approved_by":null},{"number":32,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/32","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/32","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-hostname-regexp","severity":"warning","description":"Incomplete regular expression for hostnames","name":"js/incomplete-hostname-regexp","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected.","help":"# Incomplete regular expression for hostnames\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Often, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nIf a regular expression implements such a check, it is easy to accidentally make the check too permissive by not escaping the `.` meta-characters appropriately. Even if the check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when it accidentally succeeds.\n\n\n## Recommendation\nEscape all meta-characters appropriately when constructing regular expressions for security checks, and pay special attention to the `.` meta-character.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    let regex = /^((www|beta).)?example.com/;\n    if (host.match(regex)) {\n        res.redirect(url);\n    }\n});\n\n```\nThe check is however easy to bypass because the unescaped `.` allows for any character before `example.com`, effectively allowing the redirect to go to an attacker-controlled domain such as `wwwXexample.com`.\n\nAddress this vulnerability by escaping `.` appropriately: `let regex = /^((www|beta)\\.)?example\\.com/`.\n\n\n## References\n* MDN: [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This string, which is used as a regular expression here, has an unescaped '.' before 'google.com', so it might match more hosts than expected."},"location":{"path":"docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":529899,"end_column":529923},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/32/instances","dismissal_approved_by":null},{"number":31,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/31","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/31","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-hostname-regexp","severity":"warning","description":"Incomplete regular expression for hostnames","name":"js/incomplete-hostname-regexp","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected.","help":"# Incomplete regular expression for hostnames\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Often, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nIf a regular expression implements such a check, it is easy to accidentally make the check too permissive by not escaping the `.` meta-characters appropriately. Even if the check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when it accidentally succeeds.\n\n\n## Recommendation\nEscape all meta-characters appropriately when constructing regular expressions for security checks, and pay special attention to the `.` meta-character.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    let regex = /^((www|beta).)?example.com/;\n    if (host.match(regex)) {\n        res.redirect(url);\n    }\n});\n\n```\nThe check is however easy to bypass because the unescaped `.` allows for any character before `example.com`, effectively allowing the redirect to go to an attacker-controlled domain such as `wwwXexample.com`.\n\nAddress this vulnerability by escaping `.` appropriately: `let regex = /^((www|beta)\\.)?example\\.com/`.\n\n\n## References\n* MDN: [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This string, which is used as a regular expression here, has an unescaped '.' before 'googleapis.com', so it might match more hosts than expected."},"location":{"path":"docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":529876,"end_column":529898},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/31/instances","dismissal_approved_by":null},{"number":30,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/30","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/30","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-hostname-regexp","severity":"warning","description":"Incomplete regular expression for hostnames","name":"js/incomplete-hostname-regexp","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected.","help":"# Incomplete regular expression for hostnames\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Often, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nIf a regular expression implements such a check, it is easy to accidentally make the check too permissive by not escaping the `.` meta-characters appropriately. Even if the check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when it accidentally succeeds.\n\n\n## Recommendation\nEscape all meta-characters appropriately when constructing regular expressions for security checks, and pay special attention to the `.` meta-character.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    let regex = /^((www|beta).)?example.com/;\n    if (host.match(regex)) {\n        res.redirect(url);\n    }\n});\n\n```\nThe check is however easy to bypass because the unescaped `.` allows for any character before `example.com`, effectively allowing the redirect to go to an attacker-controlled domain such as `wwwXexample.com`.\n\nAddress this vulnerability by escaping `.` appropriately: `let regex = /^((www|beta)\\.)?example\\.com/`.\n\n\n## References\n* MDN: [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This string, which is used as a regular expression here, has an unescaped '.' before 'google.com', so it might match more hosts than expected."},"location":{"path":"frontend/docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":529899,"end_column":529923},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/30/instances","dismissal_approved_by":null},{"number":29,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/29","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/29","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-hostname-regexp","severity":"warning","description":"Incomplete regular expression for hostnames","name":"js/incomplete-hostname-regexp","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected.","help":"# Incomplete regular expression for hostnames\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Often, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nIf a regular expression implements such a check, it is easy to accidentally make the check too permissive by not escaping the `.` meta-characters appropriately. Even if the check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when it accidentally succeeds.\n\n\n## Recommendation\nEscape all meta-characters appropriately when constructing regular expressions for security checks, and pay special attention to the `.` meta-character.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    let regex = /^((www|beta).)?example.com/;\n    if (host.match(regex)) {\n        res.redirect(url);\n    }\n});\n\n```\nThe check is however easy to bypass because the unescaped `.` allows for any character before `example.com`, effectively allowing the redirect to go to an attacker-controlled domain such as `wwwXexample.com`.\n\nAddress this vulnerability by escaping `.` appropriately: `let regex = /^((www|beta)\\.)?example\\.com/`.\n\n\n## References\n* MDN: [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This string, which is used as a regular expression here, has an unescaped '.' before 'googleapis.com', so it might match more hosts than expected."},"location":{"path":"frontend/docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":529876,"end_column":529898},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/29/instances","dismissal_approved_by":null},{"number":28,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/28","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/28","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-hostname-regexp","severity":"warning","description":"Incomplete regular expression for hostnames","name":"js/incomplete-hostname-regexp","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected.","help":"# Incomplete regular expression for hostnames\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Often, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nIf a regular expression implements such a check, it is easy to accidentally make the check too permissive by not escaping the `.` meta-characters appropriately. Even if the check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when it accidentally succeeds.\n\n\n## Recommendation\nEscape all meta-characters appropriately when constructing regular expressions for security checks, and pay special attention to the `.` meta-character.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    let regex = /^((www|beta).)?example.com/;\n    if (host.match(regex)) {\n        res.redirect(url);\n    }\n});\n\n```\nThe check is however easy to bypass because the unescaped `.` allows for any character before `example.com`, effectively allowing the redirect to go to an attacker-controlled domain such as `wwwXexample.com`.\n\nAddress this vulnerability by escaping `.` appropriately: `let regex = /^((www|beta)\\.)?example\\.com/`.\n\n\n## References\n* MDN: [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This string, which is used as a regular expression here, has an unescaped '.' before 'googleapis.com', so it might match more hosts than expected.\nThis string, which is used as a regular expression here, has an unescaped '.' before 'googleapis.com', so it might match more hosts than expected."},"location":{"path":"docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":526687,"end_column":526717},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/28/instances","dismissal_approved_by":null},{"number":27,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/27","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/27","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-hostname-regexp","severity":"warning","description":"Incomplete regular expression for hostnames","name":"js/incomplete-hostname-regexp","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected.","help":"# Incomplete regular expression for hostnames\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Often, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nIf a regular expression implements such a check, it is easy to accidentally make the check too permissive by not escaping the `.` meta-characters appropriately. Even if the check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when it accidentally succeeds.\n\n\n## Recommendation\nEscape all meta-characters appropriately when constructing regular expressions for security checks, and pay special attention to the `.` meta-character.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    let regex = /^((www|beta).)?example.com/;\n    if (host.match(regex)) {\n        res.redirect(url);\n    }\n});\n\n```\nThe check is however easy to bypass because the unescaped `.` allows for any character before `example.com`, effectively allowing the redirect to go to an attacker-controlled domain such as `wwwXexample.com`.\n\nAddress this vulnerability by escaping `.` appropriately: `let regex = /^((www|beta)\\.)?example\\.com/`.\n\n\n## References\n* MDN: [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This string, which is used as a regular expression here, has an unescaped '.' before 'googleapis.com', so it might match more hosts than expected.\nThis string, which is used as a regular expression here, has an unescaped '.' before 'googleapis.com', so it might match more hosts than expected."},"location":{"path":"frontend/docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":526687,"end_column":526717},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/27/instances","dismissal_approved_by":null},{"number":26,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/26","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/26","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"'yourapp.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"src/authRoutes.js","start_line":116,"end_line":116,"start_column":9,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/26/instances","dismissal_approved_by":null},{"number":25,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/25","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/25","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"'yourdomain.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"src/authRoutes.js","start_line":115,"end_line":115,"start_column":9,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/25/instances","dismissal_approved_by":null},{"number":24,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/24","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/24","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"'github.io' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"config/apiConfig.js","start_line":12,"end_line":12,"start_column":25,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/24/instances","dismissal_approved_by":null},{"number":23,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/23","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/23","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-storage-of-sensitive-data","severity":"error","description":"Clear text storage of sensitive information","name":"js/clear-text-storage-of-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-315","external/cwe/cwe-359","security"],"full_description":"Sensitive information stored without encryption or hashing can expose it to an attacker.","help":"# Clear text storage of sensitive information\nSensitive information that is stored unencrypted is accessible to an attacker who gains access to the storage. This is particularly important for cookies, which are stored on the machine of the end-user.\n\n\n## Recommendation\nEnsure that sensitive information is always encrypted before being stored. If possible, avoid placing sensitive information in cookies altogether. Instead, prefer storing, in the cookie, a key that can be used to look up the sensitive information.\n\nIn general, decrypt sensitive information only at the point where it is necessary for it to be used in cleartext.\n\nBe aware that external processes often store the `standard out` and `standard error` streams of the application, causing logged sensitive information to be stored as well.\n\n\n## Example\nThe following example code stores user credentials (in this case, their password) in a cookie in plain text:\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\napp.get('/remember-password', function (req, res) {\n  let pw = req.param(\"current_password\");\n  // BAD: Setting a cookie value with cleartext sensitive data.\n  res.cookie(\"password\", pw);\n});\n\n```\nInstead, the credentials should be encrypted, for instance by using the Node.js `crypto` module:\n\n\n```javascript\nvar express = require('express');\nvar crypto = require('crypto'),\n    password = getPassword();\n\nfunction encrypt(text){\n  var cipher = crypto.createCipher('aes-256-ctr', password);\n  return cipher.update(text, 'utf8', 'hex') + cipher.final('hex');\n}\n\nvar app = express();\napp.get('/remember-password', function (req, res) {\n  let pw = req.param(\"current_password\");\n  // GOOD: Encoding the value before setting it.\n  res.cookie(\"password\", encrypt(pw));\n});\n\n```\n\n## References\n* M. Dowd, J. McDonald and J. Schuhm, *The Art of Software Security Assessment*, 1st Edition, Chapter 2 - 'Common Vulnerabilities of Encryption', p. 43. Addison Wesley, 2006.\n* M. Howard and D. LeBlanc, *Writing Secure Code*, 2nd Edition, Chapter 9 - 'Protecting Secret Data', p. 299. Microsoft, 2002.\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-315](https://cwe.mitre.org/data/definitions/315.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This stores sensitive data returned by a call to signInWithEmailAndPassword as clear text."},"location":{"path":"docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":595025,"end_column":595042},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/23/instances","dismissal_approved_by":null},{"number":22,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/22","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/22","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-storage-of-sensitive-data","severity":"error","description":"Clear text storage of sensitive information","name":"js/clear-text-storage-of-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-315","external/cwe/cwe-359","security"],"full_description":"Sensitive information stored without encryption or hashing can expose it to an attacker.","help":"# Clear text storage of sensitive information\nSensitive information that is stored unencrypted is accessible to an attacker who gains access to the storage. This is particularly important for cookies, which are stored on the machine of the end-user.\n\n\n## Recommendation\nEnsure that sensitive information is always encrypted before being stored. If possible, avoid placing sensitive information in cookies altogether. Instead, prefer storing, in the cookie, a key that can be used to look up the sensitive information.\n\nIn general, decrypt sensitive information only at the point where it is necessary for it to be used in cleartext.\n\nBe aware that external processes often store the `standard out` and `standard error` streams of the application, causing logged sensitive information to be stored as well.\n\n\n## Example\nThe following example code stores user credentials (in this case, their password) in a cookie in plain text:\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\napp.get('/remember-password', function (req, res) {\n  let pw = req.param(\"current_password\");\n  // BAD: Setting a cookie value with cleartext sensitive data.\n  res.cookie(\"password\", pw);\n});\n\n```\nInstead, the credentials should be encrypted, for instance by using the Node.js `crypto` module:\n\n\n```javascript\nvar express = require('express');\nvar crypto = require('crypto'),\n    password = getPassword();\n\nfunction encrypt(text){\n  var cipher = crypto.createCipher('aes-256-ctr', password);\n  return cipher.update(text, 'utf8', 'hex') + cipher.final('hex');\n}\n\nvar app = express();\napp.get('/remember-password', function (req, res) {\n  let pw = req.param(\"current_password\");\n  // GOOD: Encoding the value before setting it.\n  res.cookie(\"password\", encrypt(pw));\n});\n\n```\n\n## References\n* M. Dowd, J. McDonald and J. Schuhm, *The Art of Software Security Assessment*, 1st Edition, Chapter 2 - 'Common Vulnerabilities of Encryption', p. 43. Addison Wesley, 2006.\n* M. Howard and D. LeBlanc, *Writing Secure Code*, 2nd Edition, Chapter 9 - 'Protecting Secret Data', p. 299. Microsoft, 2002.\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-315](https://cwe.mitre.org/data/definitions/315.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This stores sensitive data returned by a call to signInWithEmailAndPassword as clear text."},"location":{"path":"frontend/docs/static/js/main.9630dff7.js","start_line":2,"end_line":2,"start_column":595025,"end_column":595042},"classifications":["documentation"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/22/instances","dismissal_approved_by":null},{"number":21,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/21","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/21","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-storage-of-sensitive-data","severity":"error","description":"Clear text storage of sensitive information","name":"js/clear-text-storage-of-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-315","external/cwe/cwe-359","security"],"full_description":"Sensitive information stored without encryption or hashing can expose it to an attacker.","help":"# Clear text storage of sensitive information\nSensitive information that is stored unencrypted is accessible to an attacker who gains access to the storage. This is particularly important for cookies, which are stored on the machine of the end-user.\n\n\n## Recommendation\nEnsure that sensitive information is always encrypted before being stored. If possible, avoid placing sensitive information in cookies altogether. Instead, prefer storing, in the cookie, a key that can be used to look up the sensitive information.\n\nIn general, decrypt sensitive information only at the point where it is necessary for it to be used in cleartext.\n\nBe aware that external processes often store the `standard out` and `standard error` streams of the application, causing logged sensitive information to be stored as well.\n\n\n## Example\nThe following example code stores user credentials (in this case, their password) in a cookie in plain text:\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\napp.get('/remember-password', function (req, res) {\n  let pw = req.param(\"current_password\");\n  // BAD: Setting a cookie value with cleartext sensitive data.\n  res.cookie(\"password\", pw);\n});\n\n```\nInstead, the credentials should be encrypted, for instance by using the Node.js `crypto` module:\n\n\n```javascript\nvar express = require('express');\nvar crypto = require('crypto'),\n    password = getPassword();\n\nfunction encrypt(text){\n  var cipher = crypto.createCipher('aes-256-ctr', password);\n  return cipher.update(text, 'utf8', 'hex') + cipher.final('hex');\n}\n\nvar app = express();\napp.get('/remember-password', function (req, res) {\n  let pw = req.param(\"current_password\");\n  // GOOD: Encoding the value before setting it.\n  res.cookie(\"password\", encrypt(pw));\n});\n\n```\n\n## References\n* M. Dowd, J. McDonald and J. Schuhm, *The Art of Software Security Assessment*, 1st Edition, Chapter 2 - 'Common Vulnerabilities of Encryption', p. 43. Addison Wesley, 2006.\n* M. Howard and D. LeBlanc, *Writing Secure Code*, 2nd Edition, Chapter 9 - 'Protecting Secret Data', p. 299. Microsoft, 2002.\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-315](https://cwe.mitre.org/data/definitions/315.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This stores sensitive data returned by a call to signInWithEmailAndPassword as clear text."},"location":{"path":"frontend/src/AdminLoginFix.js","start_line":101,"end_line":101,"start_column":36,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/21/instances","dismissal_approved_by":null},{"number":20,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/20","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/20","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by an access to noAuthResponse as clear text."},"location":{"path":"test-token-exchange-flow.js","start_line":138,"end_line":138,"start_column":43,"end_column":64},"classifications":["test"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/20/instances","dismissal_approved_by":null},{"number":19,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/19","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/19","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by process environment as clear text.\nThis logs sensitive data returned by process environment as clear text."},"location":{"path":"scripts/checkFirebaseCredentials.js","start_line":29,"end_line":29,"start_column":38,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/19/instances","dismissal_approved_by":null},{"number":18,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/18","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/18","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by process environment as clear text.\nThis logs sensitive data returned by process environment as clear text."},"location":{"path":"scripts/checkFirebaseCredentials.js","start_line":28,"end_line":28,"start_column":36,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/18/instances","dismissal_approved_by":null},{"number":17,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/17","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/17","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by process environment as clear text.\nThis logs sensitive data returned by process environment as clear text."},"location":{"path":"scripts/checkFirebaseCredentials.js","start_line":18,"end_line":18,"start_column":45,"end_column":68},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/17/instances","dismissal_approved_by":null},{"number":16,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/16","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/16","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by an access to password as clear text."},"location":{"path":"recreate-all-users.js","start_line":204,"end_line":204,"start_column":17,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/16/instances","dismissal_approved_by":null},{"number":15,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/15","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/15","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by process environment as clear text."},"location":{"path":"firebase-diagnostics.js","start_line":253,"end_line":253,"start_column":17,"end_column":85},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/15/instances","dismissal_approved_by":null},{"number":14,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/14","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/14","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by process environment as clear text."},"location":{"path":"firebase-diagnostics.js","start_line":58,"end_line":58,"start_column":19,"end_column":96},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/14/instances","dismissal_approved_by":null},{"number":13,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/13","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/13","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by process environment as clear text."},"location":{"path":"firebase-diagnostics.js","start_line":57,"end_line":57,"start_column":19,"end_column":92},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/13/instances","dismissal_approved_by":null},{"number":12,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/12","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/12","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by an access to password as clear text."},"location":{"path":"firebase-auth-fix.js","start_line":386,"end_line":386,"start_column":32,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/12/instances","dismissal_approved_by":null},{"number":11,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/11","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/11","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by an access to password as clear text."},"location":{"path":"firebase-auth-fix.js","start_line":381,"end_line":381,"start_column":32,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/11/instances","dismissal_approved_by":null},{"number":10,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/10","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/10","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by an access to noAuthResponse as clear text."},"location":{"path":"dist/test-token-exchange-flow.js","start_line":138,"end_line":138,"start_column":43,"end_column":64},"classifications":["test"]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/10/instances","dismissal_approved_by":null},{"number":9,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/9","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/9","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by an access to password as clear text."},"location":{"path":"dist/recreate-all-users.js","start_line":204,"end_line":204,"start_column":17,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/9/instances","dismissal_approved_by":null},{"number":8,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/8","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/8","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by process environment as clear text."},"location":{"path":"dist/firebase-diagnostics.js","start_line":253,"end_line":253,"start_column":17,"end_column":85},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/8/instances","dismissal_approved_by":null},{"number":7,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/7","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/7","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by process environment as clear text."},"location":{"path":"dist/firebase-diagnostics.js","start_line":58,"end_line":58,"start_column":19,"end_column":96},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/7/instances","dismissal_approved_by":null},{"number":6,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/6","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/6","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by process environment as clear text."},"location":{"path":"dist/firebase-diagnostics.js","start_line":57,"end_line":57,"start_column":19,"end_column":92},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/6/instances","dismissal_approved_by":null},{"number":5,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/5","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/5","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by an access to password as clear text."},"location":{"path":"dist/firebase-auth-fix.js","start_line":386,"end_line":386,"start_column":32,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/5/instances","dismissal_approved_by":null},{"number":4,"created_at":"2025-10-27T10:12:17Z","updated_at":"2025-10-27T10:12:17Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/4","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/4","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-logging","severity":"error","description":"Clear-text logging of sensitive information","name":"js/clear-text-logging","tags":["external/cwe/cwe-312","external/cwe/cwe-359","external/cwe/cwe-532","security"],"full_description":"Logging sensitive information without encryption or hashing can expose it to an attacker.","help":"# Clear-text logging of sensitive information\nIf sensitive data is written to a log entry it could be exposed to an attacker who gains access to the logs.\n\nPotential attackers can obtain sensitive user data when the log output is displayed. Additionally that data may expose system information such as full path names, system information, and sometimes usernames and passwords.\n\n\n## Recommendation\nSensitive data should not be logged.\n\n\n## Example\nIn the example the entire process environment is logged using \\`console.info\\`. Regular users of the production deployed application should not have access to this much information about the environment configuration.\n\n\n```javascript\n// BAD: Logging cleartext sensitive data\nconsole.info(`[INFO] Environment: ${JSON.stringify(process.env)}`);\n\n```\nIn the second example the data that is logged is not sensitive.\n\n\n```javascript\nlet not_sensitive_data = { a: 1, b : 2} \n// GOOD: it is fine to log data that is not sensitive\nconsole.info(`[INFO] Some object contains: ${JSON.stringify(not_sensitive_data)}`);\n```\n\n## References\n* OWASP: [Insertion of Sensitive Information into Log File](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/).\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n* Common Weakness Enumeration: [CWE-532](https://cwe.mitre.org/data/definitions/532.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"This logs sensitive data returned by an access to password as clear text."},"location":{"path":"dist/firebase-auth-fix.js","start_line":381,"end_line":381,"start_column":32,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/4/instances","dismissal_approved_by":null},{"number":3,"created_at":"2025-10-27T10:11:04Z","updated_at":"2025-10-27T10:11:04Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/3","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/3","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/missing-workflow-permissions","severity":"warning","description":"Workflow does not contain permissions","name":"actions/missing-workflow-permissions","tags":["actions","external/cwe/cwe-275","maintainability","security"],"full_description":"Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.","help":"## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"},"location":{"path":".github/workflows/deploy.yml","start_line":34,"end_line":64,"start_column":5,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/3/instances","dismissal_approved_by":null},{"number":2,"created_at":"2025-10-27T10:11:04Z","updated_at":"2025-10-27T10:11:04Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/2","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/2","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/missing-workflow-permissions","severity":"warning","description":"Workflow does not contain permissions","name":"actions/missing-workflow-permissions","tags":["actions","external/cwe/cwe-275","maintainability","security"],"full_description":"Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.","help":"## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"},"location":{"path":".github/workflows/deploy.yml","start_line":11,"end_line":33,"start_column":5,"end_column":3},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/2/instances","dismissal_approved_by":null},{"number":1,"created_at":"2025-10-27T10:11:04Z","updated_at":"2025-10-27T10:11:04Z","url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/1","html_url":"https://github.com/Tibule12/AutoPromote/security/code-scanning/1","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/missing-workflow-permissions","severity":"warning","description":"Workflow does not contain permissions","name":"actions/missing-workflow-permissions","tags":["actions","external/cwe/cwe-275","maintainability","security"],"full_description":"Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.","help":"## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"ecc5e5dc4e358c76ca51cc09bf2c38f776c09c99","message":{"text":"Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"},"location":{"path":".github/workflows/ci.yml","start_line":11,"end_line":29,"start_column":5,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/Tibule12/AutoPromote/code-scanning/alerts/1/instances","dismissal_approved_by":null}]
