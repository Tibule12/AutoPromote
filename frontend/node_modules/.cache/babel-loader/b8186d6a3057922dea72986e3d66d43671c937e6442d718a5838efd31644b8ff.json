{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tulani.Mtshwelo\\\\Promo\\\\AutoPromote\\\\frontend\\\\src\\\\AdminLoginForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from './firebaseClient';\nimport './Auth.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminLoginForm = ({\n  onLogin\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    email: 'admin123@gmail.com',\n    password: ''\n  });\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (error) setError('');\n  }, [error]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n    try {\n      const {\n        email,\n        password\n      } = formData;\n      console.log('Attempting admin login with:', email);\n\n      // Sign in with Firebase Authentication\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      const {\n        user\n      } = userCredential;\n      console.log('Firebase admin auth successful, getting ID token...');\n\n      // Get the ID token\n      const idToken = await user.getIdToken(true); // Force refresh the token to ensure it's up-to-date\n\n      // Verify token and get user data from our backend - use admin-specific endpoint\n      const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n      const response = await fetch(`${apiUrl}/api/auth/admin-login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Origin': window.location.origin\n        },\n        body: JSON.stringify({\n          idToken,\n          email: email,\n          isAdminLogin: true\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Admin login server response:', {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorData\n        });\n        throw new Error(errorData.error || 'Admin authentication failed');\n      }\n      const data = await response.json();\n\n      // Verify this is actually an admin user\n      if (!data.user.isAdmin && data.user.role !== 'admin') {\n        throw new Error('Not authorized as admin');\n      }\n\n      // Pass user info to parent component\n      onLogin({\n        email: data.user.email,\n        uid: data.user.uid,\n        role: 'admin',\n        isAdmin: true,\n        name: data.user.name,\n        token: data.token,\n        fromCollection: data.user.fromCollection || 'admins'\n      });\n    } catch (error) {\n      console.error('Admin login error:', error);\n      console.error('Error details:', {\n        code: error.code,\n        message: error.message,\n        fullError: JSON.stringify(error, null, 2)\n      });\n      let errorMessage = 'Admin login failed. ';\n      switch (error.code) {\n        case 'auth/invalid-credential':\n          errorMessage += 'Invalid admin email or password.';\n          break;\n        case 'auth/user-not-found':\n          errorMessage += 'No admin account exists with this email.';\n          break;\n        case 'auth/wrong-password':\n          errorMessage += 'Incorrect admin password.';\n          break;\n        case 'auth/invalid-api-key':\n          errorMessage += 'Invalid Firebase configuration. Please check the setup.';\n          break;\n        case 'auth/network-request-failed':\n          errorMessage += 'Network error. Please check your connection.';\n          break;\n        default:\n          errorMessage += `${error.message} (${error.code})`;\n      }\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"auth-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"auth-title\",\n        children: \"Admin Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Admin Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          value: formData.email,\n          onChange: handleChange,\n          className: \"form-input\",\n          placeholder: \"Enter admin email\",\n          required: true,\n          autoComplete: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Admin Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          value: formData.password,\n          onChange: handleChange,\n          required: true,\n          autoComplete: \"current-password\",\n          placeholder: \"Enter admin password\",\n          className: \"form-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        className: \"auth-button\",\n        style: {\n          backgroundColor: '#d32f2f'\n        } // Different color for admin login\n        ,\n        children: isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"loading-spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), \"Signing in as Admin...\"]\n        }, void 0, true) : 'Sign In as Admin'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        onClick: () => window.location.reload(),\n        className: \"auth-link\",\n        children: \"Go to user login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminLoginForm, \"N9o6iZMUv3uT+5H9w/o5BixW+7U=\");\n_c = AdminLoginForm;\nexport default AdminLoginForm;\nvar _c;\n$RefreshReg$(_c, \"AdminLoginForm\");","map":{"version":3,"names":["React","useState","useCallback","signInWithEmailAndPassword","auth","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminLoginForm","onLogin","_s","formData","setFormData","email","password","error","setError","isLoading","setIsLoading","handleChange","e","name","value","target","prev","handleSubmit","preventDefault","console","log","userCredential","user","idToken","getIdToken","apiUrl","process","env","REACT_APP_API_URL","response","fetch","method","headers","window","location","origin","body","JSON","stringify","isAdminLogin","ok","errorData","json","status","statusText","Error","data","isAdmin","role","uid","token","fromCollection","code","message","fullError","errorMessage","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","required","autoComplete","disabled","style","backgroundColor","href","onClick","reload","_c","$RefreshReg$"],"sources":["C:/Users/Tulani.Mtshwelo/Promo/AutoPromote/frontend/src/AdminLoginForm.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { signInWithEmailAndPassword } from 'firebase/auth';\r\nimport { auth } from './firebaseClient';\r\nimport './Auth.css';\r\n\r\nconst AdminLoginForm = ({ onLogin }) => {\r\n  const [formData, setFormData] = useState({ email: 'admin123@gmail.com', password: '' });\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  const handleChange = useCallback((e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n    if (error) setError('');\r\n  }, [error]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      const { email, password } = formData;\r\n      \r\n      console.log('Attempting admin login with:', email);\r\n      \r\n      // Sign in with Firebase Authentication\r\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n      const { user } = userCredential;\r\n\r\n      console.log('Firebase admin auth successful, getting ID token...');\r\n      \r\n      // Get the ID token\r\n      const idToken = await user.getIdToken(true);  // Force refresh the token to ensure it's up-to-date\r\n\r\n      // Verify token and get user data from our backend - use admin-specific endpoint\r\n      const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5001';\r\n      const response = await fetch(`${apiUrl}/api/auth/admin-login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'Origin': window.location.origin\r\n        },\r\n        body: JSON.stringify({ \r\n          idToken,\r\n          email: email,\r\n          isAdminLogin: true\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        console.error('Admin login server response:', {\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          error: errorData\r\n        });\r\n        throw new Error(errorData.error || 'Admin authentication failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Verify this is actually an admin user\r\n      if (!data.user.isAdmin && data.user.role !== 'admin') {\r\n        throw new Error('Not authorized as admin');\r\n      }\r\n      \r\n      // Pass user info to parent component\r\n      onLogin({\r\n        email: data.user.email,\r\n        uid: data.user.uid,\r\n        role: 'admin',\r\n        isAdmin: true,\r\n        name: data.user.name,\r\n        token: data.token,\r\n        fromCollection: data.user.fromCollection || 'admins'\r\n      });\r\n    } catch (error) {\r\n      console.error('Admin login error:', error);\r\n      console.error('Error details:', {\r\n        code: error.code,\r\n        message: error.message,\r\n        fullError: JSON.stringify(error, null, 2)\r\n      });\r\n      \r\n      let errorMessage = 'Admin login failed. ';\r\n      switch (error.code) {\r\n        case 'auth/invalid-credential':\r\n          errorMessage += 'Invalid admin email or password.';\r\n          break;\r\n        case 'auth/user-not-found':\r\n          errorMessage += 'No admin account exists with this email.';\r\n          break;\r\n        case 'auth/wrong-password':\r\n          errorMessage += 'Incorrect admin password.';\r\n          break;\r\n        case 'auth/invalid-api-key':\r\n          errorMessage += 'Invalid Firebase configuration. Please check the setup.';\r\n          break;\r\n        case 'auth/network-request-failed':\r\n          errorMessage += 'Network error. Please check your connection.';\r\n          break;\r\n        default:\r\n          errorMessage += `${error.message} (${error.code})`;\r\n      }\r\n      \r\n      setError(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-container\">\r\n      <form onSubmit={handleSubmit} className=\"auth-form\">\r\n        <h2 className=\"auth-title\">Admin Login</h2>\r\n        {error && (\r\n          <div className=\"error-message\">\r\n            {error}\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"form-group\">\r\n          <label className=\"form-label\">Admin Email</label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n            className=\"form-input\"\r\n            placeholder=\"Enter admin email\"\r\n            required\r\n            autoComplete=\"email\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label className=\"form-label\">Admin Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={formData.password}\r\n            onChange={handleChange}\r\n            required\r\n            autoComplete=\"current-password\"\r\n            placeholder=\"Enter admin password\"\r\n            className=\"form-input\"\r\n          />\r\n        </div>\r\n\r\n        <button \r\n          type=\"submit\" \r\n          disabled={isLoading}\r\n          className=\"auth-button\"\r\n          style={{ backgroundColor: '#d32f2f' }} // Different color for admin login\r\n        >\r\n          {isLoading ? (\r\n            <>\r\n              <span className=\"loading-spinner\"></span>\r\n              Signing in as Admin...\r\n            </>\r\n          ) : (\r\n            'Sign In as Admin'\r\n          )}\r\n        </button>\r\n\r\n        <a href=\"#\" onClick={() => window.location.reload()} className=\"auth-link\">\r\n          Go to user login\r\n        </a>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminLoginForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,SAASC,0BAA0B,QAAQ,eAAe;AAC1D,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpB,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC;IAAEa,KAAK,EAAE,oBAAoB;IAAEC,QAAQ,EAAE;EAAG,CAAC,CAAC;EACvF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMmB,YAAY,GAAGlB,WAAW,CAAEmB,CAAC,IAAK;IACtC,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCX,WAAW,CAACY,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACH,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;IACjD,IAAIP,KAAK,EAAEC,QAAQ,CAAC,EAAE,CAAC;EACzB,CAAC,EAAE,CAACD,KAAK,CAAC,CAAC;EAEX,MAAMU,YAAY,GAAG,MAAOL,CAAC,IAAK;IAChCA,CAAC,CAACM,cAAc,CAAC,CAAC;IAClBV,QAAQ,CAAC,EAAE,CAAC;IACZE,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF,MAAM;QAAEL,KAAK;QAAEC;MAAS,CAAC,GAAGH,QAAQ;MAEpCgB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEf,KAAK,CAAC;;MAElD;MACA,MAAMgB,cAAc,GAAG,MAAM3B,0BAA0B,CAACC,IAAI,EAAEU,KAAK,EAAEC,QAAQ,CAAC;MAC9E,MAAM;QAAEgB;MAAK,CAAC,GAAGD,cAAc;MAE/BF,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;;MAElE;MACA,MAAMG,OAAO,GAAG,MAAMD,IAAI,CAACE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE;;MAE9C;MACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;MACvE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,MAAM,uBAAuB,EAAE;QAC7DM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE,kBAAkB;UAC5B,QAAQ,EAAEC,MAAM,CAACC,QAAQ,CAACC;QAC5B,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBf,OAAO;UACPlB,KAAK,EAAEA,KAAK;UACZkC,YAAY,EAAE;QAChB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACV,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;QACvCvB,OAAO,CAACZ,KAAK,CAAC,8BAA8B,EAAE;UAC5CoC,MAAM,EAAEd,QAAQ,CAACc,MAAM;UACvBC,UAAU,EAAEf,QAAQ,CAACe,UAAU;UAC/BrC,KAAK,EAAEkC;QACT,CAAC,CAAC;QACF,MAAM,IAAII,KAAK,CAACJ,SAAS,CAAClC,KAAK,IAAI,6BAA6B,CAAC;MACnE;MAEA,MAAMuC,IAAI,GAAG,MAAMjB,QAAQ,CAACa,IAAI,CAAC,CAAC;;MAElC;MACA,IAAI,CAACI,IAAI,CAACxB,IAAI,CAACyB,OAAO,IAAID,IAAI,CAACxB,IAAI,CAAC0B,IAAI,KAAK,OAAO,EAAE;QACpD,MAAM,IAAIH,KAAK,CAAC,yBAAyB,CAAC;MAC5C;;MAEA;MACA5C,OAAO,CAAC;QACNI,KAAK,EAAEyC,IAAI,CAACxB,IAAI,CAACjB,KAAK;QACtB4C,GAAG,EAAEH,IAAI,CAACxB,IAAI,CAAC2B,GAAG;QAClBD,IAAI,EAAE,OAAO;QACbD,OAAO,EAAE,IAAI;QACblC,IAAI,EAAEiC,IAAI,CAACxB,IAAI,CAACT,IAAI;QACpBqC,KAAK,EAAEJ,IAAI,CAACI,KAAK;QACjBC,cAAc,EAAEL,IAAI,CAACxB,IAAI,CAAC6B,cAAc,IAAI;MAC9C,CAAC,CAAC;IACJ,CAAC,CAAC,OAAO5C,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1CY,OAAO,CAACZ,KAAK,CAAC,gBAAgB,EAAE;QAC9B6C,IAAI,EAAE7C,KAAK,CAAC6C,IAAI;QAChBC,OAAO,EAAE9C,KAAK,CAAC8C,OAAO;QACtBC,SAAS,EAAEjB,IAAI,CAACC,SAAS,CAAC/B,KAAK,EAAE,IAAI,EAAE,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAIgD,YAAY,GAAG,sBAAsB;MACzC,QAAQhD,KAAK,CAAC6C,IAAI;QAChB,KAAK,yBAAyB;UAC5BG,YAAY,IAAI,kCAAkC;UAClD;QACF,KAAK,qBAAqB;UACxBA,YAAY,IAAI,0CAA0C;UAC1D;QACF,KAAK,qBAAqB;UACxBA,YAAY,IAAI,2BAA2B;UAC3C;QACF,KAAK,sBAAsB;UACzBA,YAAY,IAAI,yDAAyD;UACzE;QACF,KAAK,6BAA6B;UAChCA,YAAY,IAAI,8CAA8C;UAC9D;QACF;UACEA,YAAY,IAAI,GAAGhD,KAAK,CAAC8C,OAAO,KAAK9C,KAAK,CAAC6C,IAAI,GAAG;MACtD;MAEA5C,QAAQ,CAAC+C,YAAY,CAAC;IACxB,CAAC,SAAS;MACR7C,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEb,OAAA;IAAK2D,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAC7B5D,OAAA;MAAM6D,QAAQ,EAAEzC,YAAa;MAACuC,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACjD5D,OAAA;QAAI2D,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC1CvD,KAAK,iBACJV,OAAA;QAAK2D,SAAS,EAAC,eAAe;QAAAC,QAAA,EAC3BlD;MAAK;QAAAoD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN,eAEDjE,OAAA;QAAK2D,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzB5D,OAAA;UAAO2D,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACjDjE,OAAA;UACEkE,IAAI,EAAC,OAAO;UACZlD,IAAI,EAAC,OAAO;UACZC,KAAK,EAAEX,QAAQ,CAACE,KAAM;UACtB2D,QAAQ,EAAErD,YAAa;UACvB6C,SAAS,EAAC,YAAY;UACtBS,WAAW,EAAC,mBAAmB;UAC/BC,QAAQ;UACRC,YAAY,EAAC;QAAO;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENjE,OAAA;QAAK2D,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzB5D,OAAA;UAAO2D,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpDjE,OAAA;UACEkE,IAAI,EAAC,UAAU;UACflD,IAAI,EAAC,UAAU;UACfC,KAAK,EAAEX,QAAQ,CAACG,QAAS;UACzB0D,QAAQ,EAAErD,YAAa;UACvBuD,QAAQ;UACRC,YAAY,EAAC,kBAAkB;UAC/BF,WAAW,EAAC,sBAAsB;UAClCT,SAAS,EAAC;QAAY;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENjE,OAAA;QACEkE,IAAI,EAAC,QAAQ;QACbK,QAAQ,EAAE3D,SAAU;QACpB+C,SAAS,EAAC,aAAa;QACvBa,KAAK,EAAE;UAAEC,eAAe,EAAE;QAAU,CAAE,CAAC;QAAA;QAAAb,QAAA,EAEtChD,SAAS,gBACRZ,OAAA,CAAAE,SAAA;UAAA0D,QAAA,gBACE5D,OAAA;YAAM2D,SAAS,EAAC;UAAiB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,0BAE3C;QAAA,eAAE,CAAC,GAEH;MACD;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK,CAAC,eAETjE,OAAA;QAAG0E,IAAI,EAAC,GAAG;QAACC,OAAO,EAAEA,CAAA,KAAMvC,MAAM,CAACC,QAAQ,CAACuC,MAAM,CAAC,CAAE;QAACjB,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAC;MAE3E;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAC5D,EAAA,CAxKIF,cAAc;AAAA0E,EAAA,GAAd1E,cAAc;AA0KpB,eAAeA,cAAc;AAAC,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}