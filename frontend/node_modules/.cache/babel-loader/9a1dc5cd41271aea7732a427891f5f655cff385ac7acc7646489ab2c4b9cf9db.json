{"ast":null,"code":"// testIntegration.js\n// This script tests the integration between the database and admin dashboard\nimport{db}from'../firebaseClient';import{collection,getDocs,query,limit,where,Timestamp}from'firebase/firestore';import DatabaseSyncService from'./dbSchemaSync';/**\r\n * Test connection to Firestore and verify collections\r\n */async function testFirestoreConnection(){console.log('üîç Testing Firestore connection...');try{// Test connection by trying to get a document from users collection\nconst usersSnapshot=await getDocs(query(collection(db,'users'),limit(1)));console.log('‚úÖ Firestore connection successful');console.log(\"\\uD83D\\uDCCA Users collection \".concat(usersSnapshot.empty?'is empty':'contains data'));return true;}catch(error){console.error('‚ùå Firestore connection failed:',error);return false;}}/**\r\n * Test that all required collections exist for the admin dashboard\r\n */async function testRequiredCollections(){console.log('üîç Testing required collections for admin dashboard...');const requiredCollections=['users','content','promotions','activities','analytics'];const results={};for(const collectionName of requiredCollections){try{const snapshot=await getDocs(query(collection(db,collectionName),limit(1)));results[collectionName]={exists:true,hasData:!snapshot.empty};console.log(\"\\u2705 Collection '\".concat(collectionName,\"' exists and \").concat(snapshot.empty?'is empty':'contains data'));}catch(error){results[collectionName]={exists:false,error:error.message};console.error(\"\\u274C Error accessing collection '\".concat(collectionName,\"':\"),error);}}return results;}/**\r\n * Test that the DatabaseSyncService can create sample data\r\n */async function testDatabaseSync(){console.log('üîç Testing database sync service...');try{const result=await DatabaseSyncService.validateDatabaseSchema();console.log(\"\\u2705 Database sync completed with result: \".concat(result));return result;}catch(error){console.error('‚ùå Database sync failed:',error);return false;}}/**\r\n * Test admin dashboard data queries\r\n */async function testAdminDashboardQueries(){console.log('üîç Testing admin dashboard queries...');try{// Get current date for today's metrics\nconst today=new Date();today.setHours(0,0,0,0);const todayTimestamp=Timestamp.fromDate(today);// Test users query\nconst usersSnapshot=await getDocs(collection(db,'users'));console.log(\"\\u2705 Users query returned \".concat(usersSnapshot.size,\" results\"));// Test new users today query\nconst newUsersQuery=query(collection(db,'users'),where('createdAt','>=',todayTimestamp));const newUsersSnapshot=await getDocs(newUsersQuery);console.log(\"\\u2705 New users today query returned \".concat(newUsersSnapshot.size,\" results\"));// Test content query\nconst contentSnapshot=await getDocs(collection(db,'content'));console.log(\"\\u2705 Content query returned \".concat(contentSnapshot.size,\" results\"));// Test promotions query\nconst promotionsSnapshot=await getDocs(collection(db,'promotions'));console.log(\"\\u2705 Promotions query returned \".concat(promotionsSnapshot.size,\" results\"));// Test activities query\nconst recentActivitiesQuery=query(collection(db,'activities'),limit(10));const recentActivitiesSnapshot=await getDocs(recentActivitiesQuery);console.log(\"\\u2705 Recent activities query returned \".concat(recentActivitiesSnapshot.size,\" results\"));return true;}catch(error){console.error('‚ùå Admin dashboard queries failed:',error);return false;}}/**\r\n * Run all tests and log results\r\n */async function runAllTests(){console.log('üöÄ Starting integration tests...');const connectionResult=await testFirestoreConnection();if(!connectionResult){console.error('‚ùå Cannot continue tests due to connection failure');return false;}const collectionsResult=await testRequiredCollections();const syncResult=await testDatabaseSync();const queriesResult=await testAdminDashboardQueries();console.log('\\nüìã Test Results Summary:');console.log(\"Firestore Connection: \".concat(connectionResult?'‚úÖ PASS':'‚ùå FAIL'));console.log(\"Required Collections: \".concat(Object.values(collectionsResult).every(r=>r.exists)?'‚úÖ PASS':'‚ùå FAIL'));console.log(\"Database Sync: \".concat(syncResult?'‚úÖ PASS':'‚ùå FAIL'));console.log(\"Dashboard Queries: \".concat(queriesResult?'‚úÖ PASS':'‚ùå FAIL'));const allPassed=connectionResult&&Object.values(collectionsResult).every(r=>r.exists)&&syncResult&&queriesResult;console.log(\"\\n\".concat(allPassed?'üéâ ALL TESTS PASSED!':'‚ùå SOME TESTS FAILED'));return allPassed;}// Export for use in browser or Node.js environment\nexport{testFirestoreConnection,testRequiredCollections,testDatabaseSync,testAdminDashboardQueries,runAllTests};// Auto-run if in Node.js environment\nif(typeof window==='undefined'){runAllTests();}","map":{"version":3,"names":["db","collection","getDocs","query","limit","where","Timestamp","DatabaseSyncService","testFirestoreConnection","console","log","usersSnapshot","concat","empty","error","testRequiredCollections","requiredCollections","results","collectionName","snapshot","exists","hasData","message","testDatabaseSync","result","validateDatabaseSchema","testAdminDashboardQueries","today","Date","setHours","todayTimestamp","fromDate","size","newUsersQuery","newUsersSnapshot","contentSnapshot","promotionsSnapshot","recentActivitiesQuery","recentActivitiesSnapshot","runAllTests","connectionResult","collectionsResult","syncResult","queriesResult","Object","values","every","r","allPassed","window"],"sources":["C:/Users/Tulani.Mtshwelo/Promo/AutoPromote/frontend/src/utils/testIntegration.js"],"sourcesContent":["// testIntegration.js\r\n// This script tests the integration between the database and admin dashboard\r\n\r\nimport { db } from '../firebaseClient';\r\nimport { collection, getDocs, query, limit, where, Timestamp } from 'firebase/firestore';\r\nimport DatabaseSyncService from './dbSchemaSync';\r\n\r\n/**\r\n * Test connection to Firestore and verify collections\r\n */\r\nasync function testFirestoreConnection() {\r\n  console.log('üîç Testing Firestore connection...');\r\n  \r\n  try {\r\n    // Test connection by trying to get a document from users collection\r\n    const usersSnapshot = await getDocs(query(collection(db, 'users'), limit(1)));\r\n    console.log('‚úÖ Firestore connection successful');\r\n    console.log(`üìä Users collection ${usersSnapshot.empty ? 'is empty' : 'contains data'}`);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('‚ùå Firestore connection failed:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Test that all required collections exist for the admin dashboard\r\n */\r\nasync function testRequiredCollections() {\r\n  console.log('üîç Testing required collections for admin dashboard...');\r\n  \r\n  const requiredCollections = ['users', 'content', 'promotions', 'activities', 'analytics'];\r\n  const results = {};\r\n  \r\n  for (const collectionName of requiredCollections) {\r\n    try {\r\n      const snapshot = await getDocs(query(collection(db, collectionName), limit(1)));\r\n      results[collectionName] = {\r\n        exists: true,\r\n        hasData: !snapshot.empty\r\n      };\r\n      console.log(`‚úÖ Collection '${collectionName}' exists and ${snapshot.empty ? 'is empty' : 'contains data'}`);\r\n    } catch (error) {\r\n      results[collectionName] = {\r\n        exists: false,\r\n        error: error.message\r\n      };\r\n      console.error(`‚ùå Error accessing collection '${collectionName}':`, error);\r\n    }\r\n  }\r\n  \r\n  return results;\r\n}\r\n\r\n/**\r\n * Test that the DatabaseSyncService can create sample data\r\n */\r\nasync function testDatabaseSync() {\r\n  console.log('üîç Testing database sync service...');\r\n  \r\n  try {\r\n    const result = await DatabaseSyncService.validateDatabaseSchema();\r\n    console.log(`‚úÖ Database sync completed with result: ${result}`);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('‚ùå Database sync failed:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Test admin dashboard data queries\r\n */\r\nasync function testAdminDashboardQueries() {\r\n  console.log('üîç Testing admin dashboard queries...');\r\n  \r\n  try {\r\n    // Get current date for today's metrics\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    const todayTimestamp = Timestamp.fromDate(today);\r\n    \r\n    // Test users query\r\n    const usersSnapshot = await getDocs(collection(db, 'users'));\r\n    console.log(`‚úÖ Users query returned ${usersSnapshot.size} results`);\r\n    \r\n    // Test new users today query\r\n    const newUsersQuery = query(\r\n      collection(db, 'users'), \r\n      where('createdAt', '>=', todayTimestamp)\r\n    );\r\n    const newUsersSnapshot = await getDocs(newUsersQuery);\r\n    console.log(`‚úÖ New users today query returned ${newUsersSnapshot.size} results`);\r\n    \r\n    // Test content query\r\n    const contentSnapshot = await getDocs(collection(db, 'content'));\r\n    console.log(`‚úÖ Content query returned ${contentSnapshot.size} results`);\r\n    \r\n    // Test promotions query\r\n    const promotionsSnapshot = await getDocs(collection(db, 'promotions'));\r\n    console.log(`‚úÖ Promotions query returned ${promotionsSnapshot.size} results`);\r\n    \r\n    // Test activities query\r\n    const recentActivitiesQuery = query(\r\n      collection(db, 'activities'),\r\n      limit(10)\r\n    );\r\n    const recentActivitiesSnapshot = await getDocs(recentActivitiesQuery);\r\n    console.log(`‚úÖ Recent activities query returned ${recentActivitiesSnapshot.size} results`);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('‚ùå Admin dashboard queries failed:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Run all tests and log results\r\n */\r\nasync function runAllTests() {\r\n  console.log('üöÄ Starting integration tests...');\r\n  \r\n  const connectionResult = await testFirestoreConnection();\r\n  if (!connectionResult) {\r\n    console.error('‚ùå Cannot continue tests due to connection failure');\r\n    return false;\r\n  }\r\n  \r\n  const collectionsResult = await testRequiredCollections();\r\n  const syncResult = await testDatabaseSync();\r\n  const queriesResult = await testAdminDashboardQueries();\r\n  \r\n  console.log('\\nüìã Test Results Summary:');\r\n  console.log(`Firestore Connection: ${connectionResult ? '‚úÖ PASS' : '‚ùå FAIL'}`);\r\n  console.log(`Required Collections: ${Object.values(collectionsResult).every(r => r.exists) ? '‚úÖ PASS' : '‚ùå FAIL'}`);\r\n  console.log(`Database Sync: ${syncResult ? '‚úÖ PASS' : '‚ùå FAIL'}`);\r\n  console.log(`Dashboard Queries: ${queriesResult ? '‚úÖ PASS' : '‚ùå FAIL'}`);\r\n  \r\n  const allPassed = connectionResult && \r\n                    Object.values(collectionsResult).every(r => r.exists) && \r\n                    syncResult && \r\n                    queriesResult;\r\n                    \r\n  console.log(`\\n${allPassed ? 'üéâ ALL TESTS PASSED!' : '‚ùå SOME TESTS FAILED'}`);\r\n  \r\n  return allPassed;\r\n}\r\n\r\n// Export for use in browser or Node.js environment\r\nexport { \r\n  testFirestoreConnection,\r\n  testRequiredCollections,\r\n  testDatabaseSync,\r\n  testAdminDashboardQueries,\r\n  runAllTests\r\n};\r\n\r\n// Auto-run if in Node.js environment\r\nif (typeof window === 'undefined') {\r\n  runAllTests();\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}