{"ast":null,"code":"// EnvChecker.js\nimport React,{useEffect}from'react';import{API_BASE_URL}from'../config';const EnvChecker=()=>{useEffect(()=>{console.log('Environment Variables Check:');// Fixed API URL logging\nconst apiUrl=process.env.REACT_APP_API_URL||'https://autopromote.onrender.com';console.log('REACT_APP_API_URL:',apiUrl);console.log('Using URL:',apiUrl);// Check if we can connect to the backend\nconst checkBackend=async()=>{try{console.log('Trying to connect to backend at:',API_BASE_URL);const response=await fetch(\"\".concat(API_BASE_URL,\"/api/health\"));if(response.ok){const data=await response.json();console.log('Backend connection successful:',data);}else{console.log('Backend returned error status:',response.status);}}catch(error){console.error('Backend connection failed:',error.message);}};checkBackend();},[]);return null;// Hide this component since it's only for diagnostic purposes\n};export default EnvChecker;","map":{"version":3,"names":["React","useEffect","API_BASE_URL","EnvChecker","console","log","apiUrl","process","env","REACT_APP_API_URL","checkBackend","response","fetch","concat","ok","data","json","status","error","message"],"sources":["C:/Users/Tulani.Mtshwelo/hello/AutoPromote/frontend/src/components/EnvChecker.js"],"sourcesContent":["// EnvChecker.js\nimport React, { useEffect } from 'react';\nimport { API_BASE_URL } from '../config';\n\nconst EnvChecker = () => {\n  useEffect(() => {\n    console.log('Environment Variables Check:');\n    \n    // Fixed API URL logging\n    const apiUrl = process.env.REACT_APP_API_URL || 'https://autopromote.onrender.com';\n    console.log('REACT_APP_API_URL:', apiUrl);\n    console.log('Using URL:', apiUrl);\n\n    // Check if we can connect to the backend\n    const checkBackend = async () => {\n      try {\n        console.log('Trying to connect to backend at:', API_BASE_URL);\n\n        const response = await fetch(`${API_BASE_URL}/api/health`);\n        if (response.ok) {\n          const data = await response.json();\n          console.log('Backend connection successful:', data);\n        } else {\n          console.log('Backend returned error status:', response.status);\n        }\n      } catch (error) {\n        console.error('Backend connection failed:', error.message);\n      }\n    };\n\n    checkBackend();\n  }, []);\n  \n  return null; // Hide this component since it's only for diagnostic purposes\n};\n\nexport default EnvChecker;\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,YAAY,KAAQ,WAAW,CAExC,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACvBF,SAAS,CAAC,IAAM,CACdG,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAE3C;AACA,KAAM,CAAAC,MAAM,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,kCAAkC,CAClFL,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEC,MAAM,CAAC,CACzCF,OAAO,CAACC,GAAG,CAAC,YAAY,CAAEC,MAAM,CAAC,CAEjC;AACA,KAAM,CAAAI,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACFN,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAEH,YAAY,CAAC,CAE7D,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIX,YAAY,eAAa,CAAC,CAC1D,GAAIS,QAAQ,CAACG,EAAE,CAAE,CACf,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClCZ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEU,IAAI,CAAC,CACrD,CAAC,IAAM,CACLX,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEM,QAAQ,CAACM,MAAM,CAAC,CAChE,CACF,CAAE,MAAOC,KAAK,CAAE,CACdd,OAAO,CAACc,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAACC,OAAO,CAAC,CAC5D,CACF,CAAC,CAEDT,YAAY,CAAC,CAAC,CAChB,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,KAAI,CAAE;AACf,CAAC,CAED,cAAe,CAAAP,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}